<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_Conveyor" Id="{2f00a41b-0680-4725-a9db-8bcc4a3809de}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Conveyor
VAR CONSTANT
	sCycleStateTextDef: ARRAY[0..10]  OF STRING :=	
		['State 0: Wait for Start',
		'State 1: Start conveyor',
		'State 2: Start Gantries',
		'State 3: Spare',
		'State 4: Spare',
		'State 5: Spare',
		'State 6: Belt running, control speed','7','8','9',
		'State 10: Error'];
	
	tCycleStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#60S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,
		T#10S];

END_VAR
VAR_INPUT
	mxResetCycleState				: BOOL;
	mxReset							: BOOL;	(*Reset Error*)
	mxEmergency						: BOOL;
	mxAutoMode						: BOOL; (* TRUE = Automode *)
	mxFirstCycle					: BOOL;

END_VAR
VAR_IN_OUT
	MachParameters					: ST_ConveyorMachPar;
	ProdParameters					: ST_ConveyorProdPar;
	SysParameters					: ST_ConveyorSysPar;
	
	IMD1_COM_IN						: ST_COM_IMD_SpdCntrl;
	IMD1_COM_OUT					: ST_COM_SpdCntrl_IMD;
	IMD2_COM_IN						: ST_COM_IMD_SpdCntrl;
	IMD2_COM_OUT					: ST_COM_SpdCntrl_IMD;
	
	FTL_COM_IN						: ST_COM_FTL_SpdCntrl;
	FTL_COM_OUT						: ST_COM_SpdCntrl_FTL;
END_VAR
VAR_OUTPUT
	(*Errors*)
	Errors							: ST_ConveyorErrors;
	mxErrorInit						: BOOL;
	mxErrorStopinPos				: BOOL;		(* Error, stop in position. Only reset neccesary *)

(* State vars *)
	mxCycleBusy						: BOOL;
	
(* Vars *)	
	mrActModPos						: LREAL;
END_VAR
VAR
(* State vars *)
	miCycleState					: INT :=0;
	miCycleOldstate					: INT :=0;
	mxCycleTransitionState			: BOOL := FALSE;
	sCycleStateText					: STRING;
	exCycleTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	CycleTimeout					: TON;
	CycleTimeOutUpFlank				: R_TRIG;
	mxCycleTimeoutEnable			: BOOL;
	CycleTime						: REAL;
	mxCycleHasError					: BOOL;
	miStopState						: INT;
	mxStartCycle					: BOOL;
	mxStopCycle						: BOOL;
	mxStopDirect					: BOOL;
	
	(* Objects *)
	Belt							: FB_NcAxis;
	IMD1_GantryA					: FB_BlowOff;
	IMD1_GantryB					: FB_BlowOff;
	IMD2_GantryA					: FB_BlowOff;
	IMD2_GantryB					: FB_BlowOff;

	mrSetpointPosition				: LREAL;
	mrActPosBeltSaved				: LREAL;	
	
	(* Internal calculating values *)
	mrModuloStart_offset			: LREAL;
	mdModuloCount					: DINT;
	RT_ModuloCount					: R_TRIG;
	mrCalculateSpeedIMD1			: LREAL;
	mrCalculateSpeedIMD2			: LREAL;
	mrAllowdKObyFTL					: LREAL;
	mrCalculateSpeedFTL				: LREAL;
	StartSpeedConveyorAuto			: LREAL;	
	mrSetRunSpeed					: LREAL;	
	miNrOfIMD						: INT := 2; //Always calculate based on two IMD enabled
	mrSetRunSpeedOld				: LREAL;
	T_Stopping						: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[mrActModPos:= Belt.axAxis.NcToPlc.ModuloActPos;

Error();
Cycle();
Objects();

]]></ST>
    </Implementation>
    <Action Name="Cycle" Id="{e859f666-04a5-47c3-aeb6-4a0a8e295096}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxCycleTransitionState:=(miCycleState<>miCycleOldstate);
(*State text*)
sCycleStateText:=sCycleStateTextDef[miCycleState];
(*Timeout Watchdog for Statemachine*)
mxCycleTimeoutEnable:=NOT (miCycleState=0 OR miCycleState=6) AND NOT mxReset;

CycleTimeout(IN:=mxCycleTimeoutEnable, PT:=tCycleStateTimeouts[miCycleState] );
CycleTimeOutUpFlank(CLK:=CycleTimeout.Q );
miCycleOldstate:=miCycleState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF CycleTimeOutUpFlank.Q THEN
	exCycleTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetCycleState THEN
	mxResetCycleState:= FALSE;
	miCycleState:=0;
	miCycleOldstate:=miCycleState;
	mxCycleTransitionState:=FALSE;
	mdModuloCount := 0;
	
	IMD1_GantryA.mxResetCycleState := TRUE;
	IMD1_GantryB.mxResetCycleState := TRUE;
	IMD2_GantryA.mxResetCycleState := TRUE;
	IMD2_GantryB.mxResetCycleState := TRUE;
	
	T_Stopping.IN := FALSE;
	IMD1_COM_OUT.StopForming := FALSE;
    IMD2_COM_OUT.StopForming := FALSE;
		
	mxStartCycle:= FALSE;
	mxStopCycle:= FALSE;
	mxStopDirect:= FALSE;
	Belt.M_Stop();
END_IF

(*Definition State has Error*)
mxCycleHasError:=FALSE;

(*Calculate modulo offset positions gantry*)
	IF ProdParameters.BlowOff_Prod.Modulo = 0 THEN
		ProdParameters.BlowOff_Prod.Modulo := 4620;
	END_IF
	IMD1_GantryA.mrModuloOffset:= (ProdParameters.BlowOff_Prod.Modulo/4)*1;
	IMD1_GantryB.mrModuloOffset:= (ProdParameters.BlowOff_Prod.Modulo/4)*3;
	IMD2_GantryA.mrModuloOffset:= 0;
	IMD2_GantryB.mrModuloOffset:= (ProdParameters.BlowOff_Prod.Modulo/4)*2;

(*Calculate allowed speeds from Communication partners *)
	(*IF MachParameters.IMD1_Enabled AND MachParameters.IMD2_Enabled THEN		//For now speed of the conveyor will always be based on 2 IMD's
		miNrOfIMD := 2;
	ELSIF MachParameters.IMD1_Enabled OR MachParameters.IMD2_Enabled THEN
		miNrOfIMD := 1;	
	END_IF*)
	
	IF ProdParameters.BlowOff_Prod.NrOfSheets = 0 THEN
		ProdParameters.BlowOff_Prod.NrOfSheets := 3;
	END_IF
	
	IF ((IMD1_COM_IN.MaximumSpeed = 0) AND IMD1_COM_IN.RTO) THEN
		mrCalculateSpeedIMD1 := StartSpeedConveyorAuto;
	ELSE
		mrCalculateSpeedIMD1 := ((IMD1_COM_IN.MaximumSpeed-0.05) * miNrOfIMD)*((ProdParameters.BlowOff_Prod.Modulo/4)/60);
	END_IF
	IF ((IMD2_COM_IN.MaximumSpeed = 0) AND IMD2_COM_IN.RTO) THEN
		mrCalculateSpeedIMD2 := StartSpeedConveyorAuto;
	ELSE
		mrCalculateSpeedIMD2 := ((IMD2_COM_IN.MaximumSpeed-0.05) * miNrOfIMD)*((ProdParameters.BlowOff_Prod.Modulo/4)/60);	
	END_IF
	mrAllowdKObyFTL := (FTL_COM_IN.MaximumSpeed/ProdParameters.BlowOff_Prod.NrOfSheets)/miNrOfIMD; 	
	mrCalculateSpeedFTL := (mrAllowdKObyFTL * miNrOfIMD)*((ProdParameters.BlowOff_Prod.Modulo/4)/60);
	StartSpeedConveyorAuto := (MachParameters.VelocityAuto * miNrOfIMD)*((ProdParameters.BlowOff_Prod.Modulo/4)/60);
	IF StartSpeedConveyorAuto > mrCalculateSpeedFTL THEN
		StartSpeedConveyorAuto := mrCalculateSpeedFTL;
	END_IF
	
	IF (MachParameters.IMD1_Enabled AND IMD1_COM_IN.RTO) AND (MachParameters.IMD2_Enabled AND IMD2_COM_IN.RTO) THEN
		IF ( mrCalculateSpeedIMD1 <= mrCalculateSpeedFTL ) AND (mrCalculateSpeedIMD2 <= mrCalculateSpeedFTL) THEN
			IF (mrCalculateSpeedIMD1 <= mrCalculateSpeedIMD2) THEN
				mrSetRunSpeed := mrCalculateSpeedIMD1;
			ELSE
				mrSetRunSpeed := mrCalculateSpeedIMD2;
			END_IF
		ELSIF ( mrCalculateSpeedIMD1 <= mrCalculateSpeedFTL ) AND (mrCalculateSpeedIMD2 >= mrCalculateSpeedFTL) THEN
			mrSetRunSpeed := mrCalculateSpeedIMD1;
		ELSIF ( mrCalculateSpeedIMD1 >= mrCalculateSpeedFTL ) AND (mrCalculateSpeedIMD2 <= mrCalculateSpeedFTL) THEN
			mrSetRunSpeed := mrCalculateSpeedIMD2;
		ELSE
			mrSetRunSpeed := mrCalculateSpeedFTL;
		END_IF	
	ELSIF MachParameters.IMD1_Enabled AND IMD1_COM_IN.RTO THEN
		IF mrCalculateSpeedIMD1 <= mrCalculateSpeedFTL THEN
			mrSetRunSpeed := mrCalculateSpeedIMD1;
		ELSE
			mrSetRunSpeed := mrCalculateSpeedFTL;
		END_IF
	ELSIF MachParameters.IMD2_Enabled AND IMD2_COM_IN.RTO THEN
		IF mrCalculateSpeedIMD2 <= mrCalculateSpeedFTL THEN
			mrSetRunSpeed := mrCalculateSpeedIMD2;
		ELSE
			mrSetRunSpeed := mrCalculateSpeedFTL;
		END_IF
	ELSIF NOT IMD1_COM_IN.RTO AND NOT IMD2_COM_IN.RTO THEN
		mrSetRunSpeed := StartSpeedConveyorAuto;	
	END_IF
	IF mrSetRunSpeed < StartSpeedConveyorAuto AND (( MachParameters.IMD1_Enabled AND IMD1_COM_IN.RTO) OR (MachParameters.IMD2_Enabled AND IMD2_COM_IN.RTO)) THEN
			mrSetRunSpeed := StartSpeedConveyorAuto;
	END_IF
	
(*Time delay speed control stopped to IMD's*)
	T_Stopping(PT:=T#5S);
	IF T_Stopping.Q THEN
		IMD1_COM_OUT.StopForming := TRUE;
        IMD2_COM_OUT.StopForming := TRUE;
	END_IF
	
(*Cycle State's*)
CASE miCycleState OF
	0:
	(*
		- wait for startcycle
		- Move belt with velo
  
	*)
		IF mxStartCycle THEN
			mxStartCycle:= FALSE;
			T_Stopping.IN := FALSE;
			IMD1_COM_OUT.StopForming := FALSE;
            IMD2_COM_OUT.StopForming := FALSE;
			
			miCycleState:= 1;
		END_IF	

	(* Move belt *)
	1:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;

			mrActPosBeltSaved:= Belt.ActPosition;		
	
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF FTL_COM_IN.RTO THEN
			mdModuloCount := 0;
			IF StartSpeedConveyorAuto > mrCalculateSpeedFTL THEN
				mrSetRunSpeed := mrCalculateSpeedFTL;
			ELSE
				mrSetRunSpeed := StartSpeedConveyorAuto;
			END_IF
			Belt.M_MoveVelocity(Velocity:= mrSetRunSpeed, Direction:= MC_Positive_Direction);
	
			miCycleState := 2;
				
		END_IF
		
	(* Start first Gantry *)	
	2:	
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;

			mrActPosBeltSaved:= Belt.ActPosition;		
	
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSE
		
			IF mrActModPos >= (IMD2_GantryA.mrModuloOffset - mrModuloStart_offset) AND  mrActModPos <= (IMD2_GantryA.mrModuloOffset + mrModuloStart_offset) THEN
				IMD2_GantryA.M_StartCycle();
			ELSIF mrActModPos >= (IMD1_GantryA.mrModuloOffset - mrModuloStart_offset) AND  mrActModPos <= (IMD1_GantryA.mrModuloOffset + mrModuloStart_offset) THEN
				IMD1_GantryA.M_StartCycle();
			ELSIF mrActModPos >= (IMD2_GantryB.mrModuloOffset - mrModuloStart_offset) AND  mrActModPos <= (IMD2_GantryB.mrModuloOffset + mrModuloStart_offset) THEN
				IMD2_GantryB.M_StartCycle();		
			ELSIF mrActModPos >= (IMD1_GantryB.mrModuloOffset - mrModuloStart_offset) AND  mrActModPos <= (IMD1_GantryB.mrModuloOffset + mrModuloStart_offset) THEN
				IMD1_GantryB.M_StartCycle();			
			END_IF
			
			IF IMD1_GantryA.mxCycleBusy AND IMD1_GantryB.mxCycleBusy AND IMD2_GantryA.mxCycleBusy AND IMD2_GantryB.mxCycleBusy THEN
				miCycleState:= 6;
			END_IF

		END_IF
	
		
	(* Speed control *)	
	6:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;

			mrActPosBeltSaved:= Belt.ActPosition;		
	
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSE
			RT_ModuloCount(CLK:= mrActModPos >= (ProdParameters.BlowOff_Prod.Modulo - ProdParameters.BlowOff_Prod.PitchGantry));
			IF 	RT_ModuloCount.Q THEN
				mdModuloCount := mdModuloCount + 1;
			END_IF
			(*IF (Belt.ActVelocity < mrSetRunSpeed) AND (mrSetRunSpeed > 0) THEN
				Belt.M_MoveVelocity(Velocity:= mrSetRunSpeed, Direction:= MC_Positive_Direction);
			END_IF*)
			IF (mdModuloCount >=  MachParameters.ModuloRamp) OR (mrSetRunSpeed = mrCalculateSpeedFTL) OR (mrSetRunSpeed < mrSetRunSpeedOld) THEN
				mdModuloCount := 0;
				Belt.M_MoveVelocity(Velocity:= mrSetRunSpeed, Direction:= MC_Positive_Direction);
			END_IF			
		END_IF	
		
	
	(* Stop Cycle, stop belt after x mm*)
	20:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			
			miCycleState:= 25;
		ELSE 
			mxStopCycle:= FALSE;
			mdModuloCount := 0;
			
			Belt.M_Stop();	
			IMD1_GantryA.M_StopCycle();
			IMD1_GantryB.M_StopCycle();
			IMD2_GantryA.M_StopCycle();
			IMD2_GantryB.M_StopCycle();
			T_Stopping.IN := TRUE;
			//IMD1_COM_OUT.StopForming := TRUE;
			//IMD2_COM_OUT.StopForming := TRUE;
			
			IF NOT Belt.axStatus.Moving OR Belt.axStatus.StandStill THEN		
				miCycleState:= 21;
			END_IF
		END_IF

	21:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			
			miCycleState:= 25;
		ELSIF mxStartCycle THEN		
			T_Stopping.IN := FALSE;	
			mxStartCycle := FALSE;
			
			miCycleState:= 22;			
		END_IF
	
	(* wait for FTL *)	
	22:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			
			miCycleState:= 25;
		ELSIF FTL_COM_IN.RTO THEN		

			IMD1_GantryA.M_StartCycle();
			IMD1_GantryB.M_StartCycle();
			IMD2_GantryA.M_StartCycle();
			IMD2_GantryB.M_StartCycle();
			
			IMD1_COM_OUT.StopForming := FALSE;
			IMD2_COM_OUT.StopForming := FALSE;
			
			IF StartSpeedConveyorAuto > mrCalculateSpeedFTL THEN
				mrSetRunSpeed := mrCalculateSpeedFTL;
			ELSE
				mrSetRunSpeed := StartSpeedConveyorAuto;
			END_IF
			Belt.M_MoveVelocity(Velocity:= mrSetRunSpeed, Direction:= MC_Positive_Direction);
			
			miCycleState:= miStopState;			
		END_IF

	(* Stop Direct *)
	25:			
		mxStartCycle:= FALSE;
		mxStopCycle:= FALSE;
		mxStopDirect:= FALSE;
		mdModuloCount := 0;
		
		IMD1_GantryA.M_StopDirect();
		IMD1_GantryB.M_StopDirect();
		IMD2_GantryA.M_StopDirect();
		IMD2_GantryB.M_StopDirect();
		
		T_Stopping.IN := TRUE;
		//IMD1_COM_OUT.StopForming := TRUE;
		//IMD2_COM_OUT.StopForming := TRUE;
		
		Belt.M_Stop();

		miCycleState:= 0;
END_CASE

mxCycleBusy:= miCycleState<>0 AND miCycleState <>21;
IMD1_COM_OUT.Modulo := IMD2_COM_OUT.Modulo := mrActModPos;
IMD1_COM_OUT.SpeedInKo := IMD2_COM_OUT.SpeedInKo := (mrSetRunSpeed/((ProdParameters.BlowOff_Prod.Modulo/4)/60))/miNrOfIMD;
mrSetRunSpeedOld := mrSetRunSpeed;

	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Error" Id="{4acfcdbf-3042-407f-b5fd-c5a660e19f95}">
      <Implementation>
        <ST><![CDATA[

(*************************************************************************************************)
mxErrorStopinPos:= Belt.ErrorStop;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_StartCycle" Id="{31ade575-aaa5-48b4-9916-2fbf369914dc}">
      <Declaration><![CDATA[METHOD M_StartCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxCycleBusy THEN
	mxStartCycle:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopCycle" Id="{1a479aea-c5e5-4972-955a-2ca3d3ef1ab4}">
      <Declaration><![CDATA[METHOD M_StopCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN 
	mxStopCycle:= TRUE; 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopDirect" Id="{b6cb47ae-764b-4727-b4c1-ac0c79561633}">
      <Declaration><![CDATA[METHOD M_StopDirect
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxStopDirect:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Action Name="Objects" Id="{c720eaca-4841-47e7-b3ea-ce50545180c4}">
      <Implementation>
        <ST><![CDATA[IMD1_GantryA(
	mxReset							:= mxReset,
	mxEmergency						:= mxEmergency,
	mxAutoMode						:= mxAutoMode,
	mrActModulo						:= mrActModPos,
	ProdPar							:= ProdParameters.BlowOff_Prod,
	COM_IMD_Stopped					:= IMD1_COM_IN.Stopped,
	COM_IMD_RTO						:= IMD1_COM_IN.RTO,
	COM_StartFormingReady			:= IMD1_COM_IN.FormingReadyA,
	COM_BlownOffProcessed			:= IMD1_COM_IN.BlowOffProcessedA,
	COM_GantryInPos 				:= IMD1_COM_IN.GantryA_Ready,
	COM_BlowOff_Pulse				=> IMD1_COM_OUT.BlowOffPulseA,
	COM_StartForming				=> IMD1_COM_OUT.StartFormingA, 
	COM_ErrSlotNotFree				=> IMD1_COM_OUT.ErrSlotANotFree,
);                                  

IMD1_GantryB(
	mxReset							:= mxReset,
	mxEmergency						:= mxEmergency,
	mxAutoMode						:= mxAutoMode,
	mrActModulo						:= mrActModPos,
	ProdPar							:= ProdParameters.BlowOff_Prod,
	COM_IMD_Stopped					:= IMD1_COM_IN.Stopped,
	COM_IMD_RTO						:= IMD1_COM_IN.RTO,
	COM_StartFormingReady			:= IMD1_COM_IN.FormingReadyB,
	COM_BlownOffProcessed			:= IMD1_COM_IN.BlowOffProcessedB,
	COM_GantryInPos 				:= IMD1_COM_IN.GantryB_Ready,
	COM_BlowOff_Pulse				=> IMD1_COM_OUT.BlowOffPulseB,
	COM_StartForming				=> IMD1_COM_OUT.StartFormingB, 
	COM_ErrSlotNotFree				=> IMD1_COM_OUT.ErrSlotBNotFree
); 


IMD2_GantryA(
	mxReset							:= mxReset,
	mxEmergency						:= mxEmergency,
	mxAutoMode						:= mxAutoMode,
	mrActModulo						:= mrActModPos,
	ProdPar							:= ProdParameters.BlowOff_Prod,
	COM_IMD_Stopped					:= IMD2_COM_IN.Stopped,
	COM_IMD_RTO						:= IMD2_COM_IN.RTO,
	COM_StartFormingReady			:= IMD2_COM_IN.FormingReadyA,
	COM_BlownOffProcessed			:= IMD2_COM_IN.BlowOffProcessedA,
	COM_GantryInPos 				:= IMD2_COM_IN.GantryA_Ready,
	COM_BlowOff_Pulse				=> IMD2_COM_OUT.BlowOffPulseA,
	COM_StartForming				=> IMD2_COM_OUT.StartFormingA, 
	COM_ErrSlotNotFree				=> IMD2_COM_OUT.ErrSlotANotFree
); 

IMD2_GantryB(
	mxReset							:= mxReset,
	mxEmergency						:= mxEmergency,
	mxAutoMode						:= mxAutoMode,
	mrActModulo						:= mrActModPos,
	ProdPar							:= ProdParameters.BlowOff_Prod,
	COM_IMD_Stopped					:= IMD2_COM_IN.Stopped,
	COM_IMD_RTO						:= IMD2_COM_IN.RTO,
	COM_StartFormingReady			:= IMD2_COM_IN.FormingReadyB,
	COM_BlownOffProcessed			:= IMD2_COM_IN.BlowOffProcessedB,
	COM_GantryInPos 				:= IMD2_COM_IN.GantryB_Ready,
	COM_BlowOff_Pulse				=> IMD2_COM_OUT.BlowOffPulseB,
	COM_StartForming				=> IMD2_COM_OUT.StartFormingB, 
	COM_ErrSlotNotFree				=> IMD2_COM_OUT.ErrSlotBNotFree
); 

Belt(
	mxEnable:= NOT mxEmergency, 
	mxInhibit:= FALSE, 
	mxAutoMode:= mxAutoMode, 
	mxReset:= mxReset, 
	mxEmergency:= mxEmergency, 
	mxSimulation:= , 
	mxFirstCycle:= , 
	mxResetCycle:= , 
	mxDisable_Positive:= FALSE, 
	mxDisable_Negative:= FALSE, 
	mxBlockHMI:= , 
	mrOverride:= 100.0, 
	mrVelocityManual:= MachParameters.VelocityManual, 
	SysParameters:= SysParameters.Belt,
	mxCycleBusy=> , 
	mxRunning=> , 
	Errors=> Errors.NCAxisError, 
	Error=> , 
	ErrorStop=> , 
	axStatus=> , 
	ActPosition=> , 
	ActVelocity=> , 
	axAxis=> );
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_Conveyor">
      <LineId Id="219" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Conveyor.Cycle">
      <LineId Id="10" Count="20" />
      <LineId Id="715" Count="0" />
      <LineId Id="987" Count="4" />
      <LineId Id="1011" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="1013" Count="1" />
      <LineId Id="526" Count="0" />
      <LineId Id="556" Count="1" />
      <LineId Id="564" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="601" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="832" Count="2" />
      <LineId Id="701" Count="0" />
      <LineId Id="707" Count="2" />
      <LineId Id="723" Count="1" />
      <LineId Id="730" Count="0" />
      <LineId Id="750" Count="1" />
      <LineId Id="753" Count="0" />
      <LineId Id="748" Count="0" />
      <LineId Id="746" Count="0" />
      <LineId Id="835" Count="13" />
      <LineId Id="566" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="993" Count="2" />
      <LineId Id="757" Count="0" />
      <LineId Id="759" Count="1" />
      <LineId Id="785" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="788" Count="2" />
      <LineId Id="794" Count="4" />
      <LineId Id="800" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="763" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="770" Count="2" />
      <LineId Id="765" Count="1" />
      <LineId Id="773" Count="3" />
      <LineId Id="767" Count="1" />
      <LineId Id="761" Count="0" />
      <LineId Id="984" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="986" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="1000" Count="1" />
      <LineId Id="1004" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="999" Count="0" />
      <LineId Id="728" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="1003" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="831" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="525" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="519" Count="3" />
      <LineId Id="506" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="544" Count="1" />
      <LineId Id="524" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="803" Count="0" />
      <LineId Id="805" Count="0" />
      <LineId Id="807" Count="1" />
      <LineId Id="806" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="569" Count="0" />
      <LineId Id="849" Count="0" />
      <LineId Id="572" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="577" Count="0" />
      <LineId Id="580" Count="11" />
      <LineId Id="608" Count="0" />
      <LineId Id="964" Count="1" />
      <LineId Id="967" Count="1" />
      <LineId Id="970" Count="1" />
      <LineId Id="973" Count="1" />
      <LineId Id="976" Count="2" />
      <LineId Id="981" Count="0" />
      <LineId Id="980" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="676" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="679" Count="11" />
      <LineId Id="711" Count="0" />
      <LineId Id="692" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="1015" Count="2" />
      <LineId Id="716" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="697" Count="1" />
      <LineId Id="633" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="414" Count="4" />
      <LineId Id="814" Count="0" />
      <LineId Id="869" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="811" Count="2" />
      <LineId Id="1002" Count="0" />
      <LineId Id="826" Count="1" />
      <LineId Id="810" Count="0" />
      <LineId Id="886" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="533" Count="1" />
      <LineId Id="909" Count="4" />
      <LineId Id="1018" Count="0" />
      <LineId Id="929" Count="2" />
      <LineId Id="888" Count="0" />
      <LineId Id="891" Count="0" />
      <LineId Id="889" Count="1" />
      <LineId Id="932" Count="4" />
      <LineId Id="938" Count="16" />
      <LineId Id="265" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="821" Count="4" />
      <LineId Id="1009" Count="1" />
      <LineId Id="828" Count="1" />
      <LineId Id="554" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="957" Count="0" />
      <LineId Id="996" Count="1" />
      <LineId Id="958" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Conveyor.Error">
      <LineId Id="41" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Conveyor.M_StartCycle">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Conveyor.M_StopCycle">
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Conveyor.M_StopDirect">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Conveyor.Objects">
      <LineId Id="144" Count="4" />
      <LineId Id="229" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="234" Count="0" />
      <LineId Id="151" Count="10" />
      <LineId Id="230" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="235" Count="0" />
      <LineId Id="164" Count="8" />
      <LineId Id="228" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="236" Count="0" />
      <LineId Id="178" Count="10" />
      <LineId Id="232" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="237" Count="0" />
      <LineId Id="191" Count="29" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>