<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="MAIN" Id="{cdf50976-21e5-4360-a42a-0d64a0472c15}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	mxReset									: BOOL;
	mxEmergency								: BOOL;
	mxAutoMode								: BOOL; (* "1" = Auto, "0" = Manual *)
	mxFirstCycle							: BOOL;
	
	Conveyor								: FB_Conveyor;
	Blink									: FB_Blink;
	
	mxHMI_Start								: BOOL;
	mxHMI_Stop								: BOOL;
	mxHMI_Pause								: BOOL;
	mxHMI_Reset								: BOOL;
	//mxHMI_StartInit							: BOOL;
	//mxHMI_StopInit							: BOOL;
	mxProductLoaded							: BOOL;
	mxMachineInRest							: BOOL;
	
	mxHMI_StartState						: BOOL;
	mxHMI_StopState							: BOOL;
	mxHMI_PauseState						: BOOL;
	
	RT_Start								: R_TRIG;
	RT_Stop									: R_TRIG;
	RT_Pause								: R_TRIG;
	RT_StartInit							: R_TRIG;
	RT_StopInit								: R_TRIG;
	
	qxLightGreen							AT %Q* : BOOL;
	qxLightYellow							AT %Q* : BOOL;
	qxLightRed								AT %Q* : BOOL;
	qxAlarmHorn								AT %Q* : BOOL;

	(*Added by bateu*)
	ix24VoltError1							AT %I* : BOOL;
	ix24VoltError2							AT %I* : BOOL;
	
	L1										AT %I* : ST_PowerMeasurement;
	L2										AT %I* : ST_PowerMeasurement;
	L3										AT %I* : ST_PowerMeasurement;		
	
	Errors									: ST_Errors;
	
(*TwinSAFE*)
	ixTwinSafe_SafetyRelay 					AT %I*:ARRAY[1..GVL.MAX_ZONES] OF BOOL; (* couple to zones in Safety programm FB outputs *)
	qxTwinSafe_Reset						AT %Q*: BOOL;

	FbError 								AT %I*: BOOL;
	ComErr 									AT %I*: BOOL;
	OutErr 									AT %I*: BOOL;
	
	(* Em Stops *)
	SR_exEmergency							: ARRAY[1..GVL.MAX_ZONES] OF SR; (* Emergency of the zones *)
	SR_EmStop								: SR;
	
	(*24V error*)
	SR_24VError1							: SR;
	SR_24VError2							: SR;
	
	SR_AttemptedStartWithNoProductLoaded	: SR;

	T_HMIReset								: TON;
	
	MachPar									: ST_MachPar;
	ProdPar									: ST_ProdPar;	
	SysPar									: ST_SysPar;
	(* Persistent vars*)
	ChkMachPar								: ST_MachPar;
	CmpMachPar								: DINT;
	ChkSysPar								: ST_SysPar;
	CmpSysPar								: DINT;
	RTRIG_WritePersistent					: R_TRIG;
	FB_WritePersistentData					: WritePersistentData;
	FB_GetCurTaskIdx						: GETCURTASKINDEX;
	T_WritePersistent						: TON;
	mxErrorInit								: BOOL;
	FT_AutoMode								: F_Trig;
	RT_MasterReset							: R_trig;
	mxInitialized							: BOOL;
	iwDevID									AT %I* :UINT;
	iAmsNetID								AT %I* :ARRAY [0..5] OF BYTE;
	iwSlaveCount							AT %I* :UINT;
	iwCfgSlaveCount							AT %I* :UINT;
	iwDevState								AT %I* :UINT;
	EtherCatDiag							: FB_EtherCATDiag;
	AmsNetID								: STRING;
	DeviceID								: INT;

	mxHMI_Stopping							: BOOL;
	
	Phase1									: REAL;
	Phase2									: REAL;
	Phase3									: REAL;

	
	ixMainSwitchOFF							AT %I* : BOOL;	
	ixUPS_Alarm								AT %I* : BOOL;
	ixUPS_BatMode							AT %I* : BOOL;
	ixUPS_Charge							AT %I* : BOOL;
	
	qxPcRemoteOff							AT %Q* : BOOL;
	
	PlcCycleTime     						: REAL := 10.0;
	RT_PauseReq								: R_TRIG;
	
	EmButtons								: BOOL;
	
	T_BatteryMode							: TON;
	T_MaintSwitch							: TON;
	SR_UPSAlarm								: SR;
	
	ComSpeedControl_IMD1					: ST_COM_SpeedControl_IMD;
	ComSpeedControl_IMD2					: ST_COM_SpeedControl_IMD;
	ComSpeedControl_FTL						: ST_COM_SpeedControl_FTL;
	
	RT_StopByFTL							: R_TRIG;
	mxStopByFTL								: BOOL;
	RT_StartByFTL							: R_TRIG;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[// 					Object Calls				//
FB_GetCurTaskIdx();
mxFirstCycle:= _TaskInfo[FB_GetCurTaskIdx.index].FirstCycle;
PlcCycleTime:= UDINT_TO_REAL(_TaskInfo[FB_GetCurTaskIdx.index].CycleTime/10000);
RemanentData();
Blink();
Error();
Objects();
HMI();
OEEE();
COM_IMD();

// 					R_Trigs.					//
RT_Start(CLK:= mxHMI_Start);
RT_Stop(CLK:= mxHMI_Stop OR Conveyor.mxErrorStopInPos); 
RT_StartByFTL(CLK:= ComSpeedControl_FTL.FTL_SpeedControl.RTO);
RT_StopByFTL(CLK:=NOT ComSpeedControl_FTL.FTL_SpeedControl.RTO);
RT_Pause(CLK:= mxHMI_Pause);
//RT_StartInit(CLK:= mxHMI_StartInit);
//RT_StopInit(CLK:= mxHMI_StopInit);
RT_MasterReset(CLK:= NOT mxAutoMode);
//RT_PauseReq(ClK:=Conveyor.mxErrorStopInPos);
//mxInitialized:= InMoldDrying.mxInitialized AND ProductHandling.mxInitialized;
mxMachineInRest := NOT Conveyor.mxCycleBusy;


// 					Start machine				//
IF (RT_Start.Q OR (mxStopByFTL AND RT_StartByFTL.Q)) AND mxAutoMode AND NOT Conveyor.mxErrorStopInPos THEN  
	Conveyor.M_StartCycle(); 
	mxHMI_Stopping :=FALSE;
	mxStopByFTL := FALSE;
END_IF

//					Normal stop					//
IF (RT_Stop.Q OR RT_StopByFTL.Q) AND mxAutoMode THEN  
	Conveyor.M_StopCycle();  
	mxHMI_Stopping := TRUE;	
	mxStopByFTL := FALSE;	
	IF RT_StopByFTL.Q AND Conveyor.mxCycleBusy THEN
		mxStopByFTL := TRUE;	
	END_IF
END_IF

//					Stop direct error			//
IF mxErrorInit OR Conveyor.mxErrorInit (*OR ComSpeedControl_IMD1.IMD_SpeedControl.ES OR ComSpeedControl_IMD2.IMD_SpeedControl.ES*) THEN
	Conveyor.M_StopDirect();
	mxStopByFTL := FALSE;
END_IF

//					HMI stop button color		//
IF mxHMI_Stopping THEN
	mxHMI_StopState := TRUE;
ELSIF NOT Conveyor.mxCycleBusy THEN
	mxHMI_StopState := TRUE;
	mxHMI_Stopping := FALSE;
ELSE
	mxHMI_StopState := FALSE;
	mxHMI_Stopping := FALSE;	
END_IF

(*
//					Signal light				//
qxLightEmStopImdFront:= qxLightEmStopImdBack:= qxLightEmStopGantryA_Front:= qxLightEmStopGantryA_Back:= qxLightEmStopGantryB_Front:= qxLightEmStopGantryB_Back := 
	Errors.exEmergency[1] OR Errors.exEmergency[2] OR Errors.exEmergency[3] OR Errors.exEmergency[4] OR Errors.exEmergency[5] OR Errors.exEmergency[6] OR Errors.exEmergency[7];
qxLightRed:= HMI.mxError;
qxLightGreen:= mxHMI_StartState := (InMoldDrying.mxCycleBusy OR ProductHandling.mxCycleBusy) AND NOT mxHMI_PauseState;
qxLightYellow:= FALSE;
*)
mxHMI_StartState := Conveyor.mxCycleBusy;

//					Reseting					//
T_HMIReset(IN:= mxHMI_Reset,PT:=T#1S);
IF T_hmiReset.Q THEN mxHMI_Reset:=FALSE; END_IF

mxReset:= qxTwinSafe_Reset:= mxHMI_Reset;

//					Master reset				//
IF RT_MasterReset.Q THEN
	Conveyor.mxResetCycleState := TRUE;
	mxStopByFTL := FALSE;
END_IF

// Get AMS net id and device id for ethercat topology
AmsNetID:= F_CreateAmsNetId(iAmsNetID);
DeviceID:= UINT_TO_INT(iwDevID);

mxHMI_Start := FALSE;
mxHMI_Stop := FALSE;
mxHMI_Pause := FALSE;

// Shut of PC when on battery mode or when power was switched off:
//T_BatteryMode(IN:=ixUPS_BatMode, PT:=T#30S);
//T_MaintSwitch(IN:=NOT ixMainSwitchOFF);

// Uncomment when timers are tested.
//qxPcRemoteOff := T_BatteryMode.Q OR T_MaintSwitch.Q;



]]></ST>
    </Implementation>
    <Action Name="COM_IMD" Id="{67951ae5-1fa6-4d55-b0a5-9b9ea4532234}">
      <Implementation>
        <ST><![CDATA[ComSpeedControl_IMD1.SpeedControl_IMD.ProdParameters :=  ProdPar.Conveyor.BlowOff_Prod;
ComSpeedControl_IMD2.SpeedControl_IMD.ProdParameters :=  ProdPar.Conveyor.BlowOff_Prod;
mxHMI_Reset := ComSpeedControl_IMD1.IMD_SpeedControl.HMI_Reset;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Error" Id="{3d78828e-6766-4156-acb4-7b22e5585d8d}">
      <Implementation>
        <ST><![CDATA[(*Emergency Stop Active Zone x,  Index=Zone , 1=Takeout/Gantr A, 2=Imd Left, 3=Imd Middle, 4=Imd Right, 5=Takeout/Gantry B*, 6=Gantry B *)
(*SR_exEmergency[1](SET1:= NOT ixTwinSafe_SafetyRelay[1], RESET:=ixTwinSafe_SafetyRelay[1] , Q1=>Errors.exEmergency[1] );
SR_exEmergency[2](SET1:= NOT ixTwinSafe_SafetyRelay[2], RESET:=ixTwinSafe_SafetyRelay[2] , Q1=>Errors.exEmergency[2] );
SR_exEmergency[3](SET1:= NOT ixTwinSafe_SafetyRelay[3], RESET:=ixTwinSafe_SafetyRelay[3] , Q1=>Errors.exEmergency[3] );
SR_exEmergency[4](SET1:= NOT ixTwinSafe_SafetyRelay[4], RESET:=ixTwinSafe_SafetyRelay[4] , Q1=>Errors.exEmergency[4] );
SR_exEmergency[5](SET1:= NOT ixTwinSafe_SafetyRelay[5] , RESET:=ixTwinSafe_SafetyRelay[5], Q1=>Errors.exEmergency[5] );
SR_exEmergency[6](SET1:= NOT ixTwinSafe_SafetyRelay[6] , RESET:=ixTwinSafe_SafetyRelay[6], Q1=>Errors.exEmergency[6] );
SR_exEmergency[7](SET1:= NOT ixTwinSafe_SafetyRelay[7] , RESET:=ixTwinSafe_SafetyRelay[7], Q1=>Errors.exEmergency[7] );

(*24V error*)
SR_24VError1(Set1:=NOT ix24VoltError1, Reset:=mxReset, Q1=>Errors.ex24VoltError1); 
SR_24VError2(Set1:=NOT ix24VoltError2, Reset:=mxReset, Q1=>Errors.ex24VoltError2); 
SR_UPSAlarm(Set1:=NOT ixUPS_Alarm, Reset:=mxReset, Q1=>Errors.exUpsAlarm);

SR_AttemptedStartWithNoProductLoaded(Set1:=NOT mxProductLoaded AND (RT_Start.Q OR RT_StartInit.Q), Reset:=mxReset, Q1=>Errors.exAtteptedStartWithNoProduct);

EtherCatDiag(
	SlaveCount:=	iwSlaveCount,
	CfgSlaveCount:=	iwCfgSlaveCount,
	DevState:=		iwDevState);

Errors.exEmergency[8]	:=EmButtons := Errors.exEmStop;
	
mxEmergency := Errors.exEmergency[1] OR Errors.exEmergency[2] OR Errors.exEmergency[3] OR 
Errors.exEmergency[4] OR Errors.exEmergency[5] OR Errors.exEmergency[6] OR Errors.exEmergency[7] OR EmButtons;

mxErrorInit:= EmButtons;*)]]></ST>
      </Implementation>
    </Action>
    <Action Name="Objects" Id="{6eb5ecfd-38fe-4cb0-8565-a5d07a66e58d}">
      <Implementation>
        <ST><![CDATA[Conveyor(
	mxReset:= mxReset, 
	mxEmergency:=  FALSE, (*ComSpeedControl_IMD1.IMD_SpeedControl.ES OR ComSpeedControl_IMD2.IMD_SpeedControl.ES,*)
	mxAutoMode:= mxAutoMode,
	mxFirstCycle:= mxFirstCycle,
	MachParameters 	:= MachPar.Conveyor,
	ProdParameters 	:= ProdPar.Conveyor,
	SysParameters	:= SysPar.Conveyor,
	IMD1_COM_IN		:= ComSpeedControl_IMD1.IMD_SpeedControl,
	IMD1_COM_OUT	:= ComSpeedControl_IMD1.SpeedControl_IMD,
	IMD2_COM_IN		:= ComSpeedControl_IMD2.IMD_SpeedControl,
	IMD2_COM_OUT	:= ComSpeedControl_IMD2.SpeedControl_IMD,
	FTL_COM_IN		:= ComSpeedControl_FTL.FTL_SpeedControl,
	FTL_COM_OUT		:= ComSpeedControl_FTL.SpeedControl_FTL,
);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="OEEE" Id="{edc7e404-c4be-491e-ba28-aaa4d568c041}">
      <Implementation>
        <ST><![CDATA[
// Calculate the voltage to normal format (000.00V)
Phase1 := DINT_TO_REAL(L1.iwVoltage) / 10000.0;
Phase2 := DINT_TO_REAL(L2.iwVoltage) / 10000.0;
Phase3 := DINT_TO_REAL(L3.iwVoltage) / 10000.0;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemanentData" Id="{1f07586f-1b40-4484-8cc4-f6df3990426b}">
      <Implementation>
        <ST><![CDATA[IF mxFirstCycle THEN
	MachPar:= PersMachPar;
	SysPar:= PersSysPar;
END_IF

CmpMachPar:= MEMCMP(ADR(MachPar), ADR(ChkMachPar),SIZEOF(ChkMachPar));
CmpSysPar:= MEMCMP(ADR(SysPar), ADR(ChkSysPar),SIZEOF(ChkSysPar));

(* Backup every x min. the persistent parameters *)
T_WritePersistent(IN:= NOT T_WritePersistent.Q , PT:=T#5M);

RTrig_WritePersistent(CLK:= (CmpMachPar <> 0) OR (CmpSysPar <> 0));

IF RTRIG_WritePersistent.Q THEN
	PersMachPar:= MachPar;
	PersSysPar:= SysPar;
	FB_WritePersistentData(NETID:='', PORT:=852, START:=TRUE, TMOUT:=T#1S );	
ELSE
	FB_WritePersistentData(NETID:='', PORT:=852, START:=FALSE, TMOUT:=T#1S );
END_IF

ChkMachPar:= MachPar;
ChkSysPar:= SysPar;
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="6671" Count="0" />
      <LineId Id="1565" Count="1" />
      <LineId Id="3669" Count="0" />
      <LineId Id="1567" Count="2" />
      <LineId Id="7029" Count="0" />
      <LineId Id="5261" Count="0" />
      <LineId Id="7027" Count="0" />
      <LineId Id="5262" Count="0" />
      <LineId Id="5265" Count="0" />
      <LineId Id="1570" Count="0" />
      <LineId Id="1572" Count="0" />
      <LineId Id="7636" Count="0" />
      <LineId Id="7503" Count="0" />
      <LineId Id="1573" Count="5" />
      <LineId Id="2827" Count="0" />
      <LineId Id="3892" Count="0" />
      <LineId Id="7024" Count="0" />
      <LineId Id="5493" Count="0" />
      <LineId Id="1580" Count="1" />
      <LineId Id="2423" Count="0" />
      <LineId Id="7509" Count="0" />
      <LineId Id="1583" Count="1" />
      <LineId Id="3890" Count="0" />
      <LineId Id="2220" Count="0" />
      <LineId Id="1585" Count="0" />
      <LineId Id="2225" Count="0" />
      <LineId Id="7508" Count="0" />
      <LineId Id="7513" Count="2" />
      <LineId Id="1587" Count="0" />
      <LineId Id="2616" Count="0" />
      <LineId Id="4107" Count="0" />
      <LineId Id="4111" Count="1" />
      <LineId Id="7510" Count="0" />
      <LineId Id="4113" Count="1" />
      <LineId Id="4110" Count="0" />
      <LineId Id="2205" Count="1" />
      <LineId Id="2210" Count="0" />
      <LineId Id="2227" Count="0" />
      <LineId Id="2226" Count="0" />
      <LineId Id="2212" Count="0" />
      <LineId Id="2228" Count="0" />
      <LineId Id="2214" Count="0" />
      <LineId Id="2207" Count="0" />
      <LineId Id="2209" Count="0" />
      <LineId Id="7147" Count="0" />
      <LineId Id="2009" Count="0" />
      <LineId Id="4118" Count="4" />
      <LineId Id="4357" Count="0" />
      <LineId Id="7266" Count="0" />
      <LineId Id="7148" Count="0" />
      <LineId Id="4358" Count="0" />
      <LineId Id="4124" Count="0" />
      <LineId Id="4126" Count="0" />
      <LineId Id="4125" Count="0" />
      <LineId Id="1612" Count="0" />
      <LineId Id="1614" Count="0" />
      <LineId Id="4127" Count="1" />
      <LineId Id="1616" Count="0" />
      <LineId Id="7511" Count="0" />
      <LineId Id="1617" Count="0" />
      <LineId Id="1622" Count="0" />
      <LineId Id="2821" Count="0" />
      <LineId Id="2823" Count="1" />
      <LineId Id="2822" Count="0" />
      <LineId Id="2623" Count="2" />
      <LineId Id="6422" Count="0" />
      <LineId Id="5951" Count="2" />
      <LineId Id="5955" Count="0" />
      <LineId Id="5958" Count="0" />
      <LineId Id="5957" Count="0" />
      <LineId Id="6905" Count="0" />
      <LineId Id="7384" Count="0" />
      <LineId Id="6906" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.COM_IMD">
      <LineId Id="2" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Error">
      <LineId Id="2" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="47" Count="2" />
      <LineId Id="69" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="61" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Objects">
      <LineId Id="115" Count="2" />
      <LineId Id="119" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="4" />
      <LineId Id="113" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.OEEE">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.RemanentData">
      <LineId Id="20" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="22" Count="19" />
      <LineId Id="44" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>