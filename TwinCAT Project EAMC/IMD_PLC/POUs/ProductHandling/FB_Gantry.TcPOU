<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_Gantry" Id="{ec7f78dd-5062-47e3-8cb6-2a2e0ceb8133}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Gantry
VAR CONSTANT
	sCycleStateTextDef: ARRAY[0..30]  OF STRING :=	
		['State 0: Wait for Start',
		'State 1: Wait for product ready at takeout unit',
		'State 2: Move vertical down to pickup position',
		'State 3: Wait for pickup at pickup position',
		'State 4: Move vertical to transport position',
		'State 5: Move horizontal to dropoff position',
		'State 6: Move vertical to dropoff position',
		'State 7: Await First dropoff window',
		'State 8: Await second dropoff window',
		'State 9: Await third dropoff window',
		'State 10: Await fourth dropoff window',
		'State 11: Move vertical up to transport position',
		'State 12: Move horizontal to pickup position',
		'State 13: Move vertican to wait for pickup position',
		'State 14',
		'State 15: [Pausing] Stop all movement',
		'State 16: [Pausing] Await all movement stopped',
		'State 17: [Paused] Wait for start',
		'State 18',
		'State 19',
		'State 20',
		'State 21',
		'State 22',
		'State 23',
		'State 24',
		'State 25',
		'State 26',
		'State 27',
		'State 28: Error'];
	
	tCycleStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,
		T#10S];

	sInitStateTextDef: ARRAY[0..10] OF STRING :=
		['State 0: Wait for Start',
		'State 1: Description Init State 1',
		'State 2: Description Init State 2',
		'State 3; Description Init State 3',
		'State 4; Description Init State 4',
		'State 5; Description Init State 5',
		'State 6; Error State'];

	tInitStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S
		,T#10S];
END_VAR
VAR_INPUT
	mxResetCycleState				: BOOL;
	mxResetInitState				: BOOL;
	mxForceInit						: BOOL; (*Reset Calibration Flag*)
	mxReset							: BOOL;	(*Reset Error*)
	mxEmergency						: BOOL;
	mxAutoMode						: BOOL; (* TRUE = Automode *)
	mxFirstCycle					: BOOL;

	BlowOffPulse					: ARRAY [1..4] OF BOOL;
	NrOfSheets						: DINT;
	NrOfCavities					: DINT;
	
	mrModPosConveyor				: LREAL;
	mxProductReadyAtTakeout			: BOOL; (* Signal from BottomMold, Takeout Unit *)
	mxDisableCollision				: BOOL;
END_VAR
VAR_IN_OUT
	MachParameters					: ST_GantryMachPar;
	ProdParameters					: ST_GantryProdPar;
	SysParameters					: ST_GantrySysPar;
END_VAR
VAR_OUTPUT
	(*Errors*)
	Errors							: ST_GantryErrors;
	mxErrorInit						: BOOL;		(* Error, stop immediately. Initialisation neccesary *)
	mxErrorStopinPos				: BOOL;		(* Error, stop in position. Only reset neccesary *)

(* State vars *)
	mxCycleBusy						: BOOL;
	mxInitBusy						: BOOL;
	
(* Vars *)
	mxInitialized					: BOOL;
	mrActPosHorizontal				: LREAL;
	mrActPosVertical				: LREAL;
	mxHorizontalIsMoving			: BOOL;
	mxVerticalIsMoving				: BOOL;
	
	(* Signals *)
	mxIsEmpty						: BOOL;
	mxProductPickedUp				: BOOL;
	BlowOffSucceded					: ARRAY [1..4] OF BOOL;
	Gantry_InPositionAtBelt			: BOOL;
END_VAR
VAR
(* State vars *)
	miCycleState					: INT :=0;
	miCycleOldstate					: INT :=0;
	mxCycleTransitionState			: BOOL := FALSE;
	sCycleStateText					: STRING;
	exCycleTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	CycleTimeout					: TON;
	CycleTimeOutUpFlank				: R_TRIG;
	mxCycleTimeoutEnable			: BOOL;
	CycleTime						: REAL;
	mxCycleHasError					: BOOL;
	miStopState						: INT;
	mxStartCycle					: BOOL;
	mxStopCycle						: BOOL;
	mxStopDirect					: BOOL;
	
	miInitState						: INT	:=0;
	miInitOldstate					: INT	:=0;
	mxInitTransitionState			: BOOL	:= FALSE;
	sInitStateText					: STRING;
	exInitTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	InitTimeout						: TON;
	InitTimeOutUpFlank				: R_TRIG;
	mxInitTimeoutEnable				: BOOL;
	InitTime						: REAL;
	mxInitHasError					: BOOL;
	mxStartInit						: BOOL;
	mxStopInit						: BOOL;

	ixCollision						AT %I*: BOOL;	(* Vertical axis *)
	ixEndLimitHorFront				AT %I*: BOOL;
	ixEndLimitHorBack				AT %I*: BOOL;
	ixEndLimitVertUp				AT %I*: BOOL;
	ixEndLimitVertDown				AT %I*: BOOL;
	
	(* Objects *)
	HorizontalAxis					: FB_NcAxis;
	VerticalAxis					: FB_NcAxis;
	(* Pickup Head *)
	BlowOff							: ARRAY [1..6] OF FB_MonoValveNoFdbck;
	VacuumValve						: ARRAY [1..6] OF FB_MonoValveNoFdbck;
	ixVacuumSensor					 AT %I* : ARRAY [1..6] OF BOOL;

	
(* Vars *)	
	miVacSection					: INT;
	miBlowOffSection				: INT;
	
	(* Errors *)
	SR_exCollision					: SR;
	SR_exEndLimitHorFront			: SR;
	SR_exEndLimitHorBack			: SR;
	SR_exEndLimitVertUp				: SR;
	SR_exEndLimitVertDown			: SR;
	SR_exProductLost				: ARRAY [1..6] OF SR;
	T_VacSensor						: ARRAY [1..6] OF TON;
	T_WaitAtPickupPosition			: TON;


	mxInPause						: BOOL;
	
	T_BlowOff1						: TON;
	T_BlowOff2						: TON;
	T_BlowOff3						: TON;	
	T_BlowOff4						: TON;
	mxSwitchVacuumOn				: ARRAY[1..6] OF BOOL; //MZE 20190314 changed to individual mxSwitchVacuum Settings
	fT_SwitchVacuumOff: F_TRIG;
	T_GantryKOTimer: TON;
	GantrySingleKo: REAL;
	T_GantryKOMaxTimer: TON;
	GantrySingleMaxKo: REAL;
	mxStopCycleEmpty: BOOL;
	mxCheckforVacuumError: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Error();
Cycle();
Init();
Objects();
]]></ST>
    </Implementation>
    <Action Name="Cycle" Id="{40de9b08-53c7-4a15-bbb0-3796579dcb28}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxCycleTransitionState:=(miCycleState<>miCycleOldstate);
(*State text*)
sCycleStateText:=sCycleStateTextDef[miCycleState];
(*Timeout Watchdog for Statemachine*)
mxCycleTimeoutEnable:=NOT (miCycleState=0) AND NOT mxReset;

CycleTimeout(IN:=mxCycleTimeoutEnable, PT:=tCycleStateTimeouts[miCycleState] );
CycleTimeOutUpFlank(CLK:=CycleTimeout.Q );
miCycleOldstate:=miCycleState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF CycleTimeOutUpFlank.Q THEN
	exCycleTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetCycleState THEN
	mxResetCycleState:= FALSE;
	miCycleState:=0;
	miCycleOldstate:=miCycleState;
	mxCycleTransitionState:=FALSE;

	mxInitialized:= FALSE;
	mxStartCycle:= FALSE;
	mxStopCycle:= FALSE;
	mxStopDirect:= FALSE;

	mxIsEmpty:= FALSE;
	mxProductPickedUp:= FALSE;
	Gantry_InPositionAtBelt := FALSE;

	T_WaitAtPickupPosition.IN:= FALSE;
	T_BlowOff1.IN:= FALSE;
	T_BlowOff2.IN:= FALSE;
	T_BlowOff3.IN:= FALSE;
	T_BlowOff4.IN:= FALSE;
	
	VacuumValve[1].M_Off();
	VacuumValve[2].M_Off();
	VacuumValve[3].M_Off();
	VacuumValve[4].M_Off();

	mxStopCycleEmpty := FALSE;
	
	T_GantryKOTimer.IN:= FALSE;
	GantrySingleKo:= TIME_TO_REAL(T_GantryKOTimer.ET);
	T_GantryKOMaxTimer.IN:= FALSE;
	GantrySingleMaxKo:= TIME_TO_REAL(T_GantryKOMaxTimer.ET);
END_IF

(*Definition State has Error*)
mxCycleHasError:=FALSE;

T_WaitAtPickupPosition(IN:= , PT:= MachParameters.GantryPickupTime);		
T_BlowOff1(IN:= , PT:= ProdParameters.BlowOffTime);
T_BlowOff2(IN:= , PT:= ProdParameters.BlowOffTime);
T_BlowOff3(IN:= , PT:= ProdParameters.BlowOffTime);
T_BlowOff4(IN:= , PT:= ProdParameters.BlowOffTime);

// Open active valves on switch vacuum on.
IF mxAutoMode THEN	//MZE 20190314 changed to individual mxSwitchVacuum Settings
	IF MachParameters.EnableVacuumSection[1] AND mxSwitchVacuumOn[1] THEN VacuumValve[1].M_On(); END_IF 
	IF MachParameters.EnableVacuumSection[2] AND mxSwitchVacuumOn[2] THEN VacuumValve[2].M_On(); END_IF
	IF MachParameters.EnableVacuumSection[3] AND mxSwitchVacuumOn[3] THEN VacuumValve[3].M_On(); END_IF
	IF MachParameters.EnableVacuumSection[4] AND mxSwitchVacuumOn[4] THEN VacuumValve[4].M_On(); END_IF
END_IF

IF T_BlowOff1.Q THEN 
	T_BlowOff1.IN:= FALSE; 
	BlowOff[1].M_Off(); 
	BlowOffSucceded[1] := FALSE;
END_IF

IF T_BlowOff2.Q THEN 
	T_BlowOff2.IN:= FALSE; 
	BlowOff[2].M_Off(); 
	BlowOffSucceded[2] := FALSE;	
END_IF

IF T_BlowOff3.Q THEN 
	T_BlowOff3.IN:= FALSE; 
	BlowOff[3].M_Off(); 
	BlowOffSucceded[3] := FALSE;	
END_IF

IF T_BlowOff4.Q THEN 
	T_BlowOff4.IN:= FALSE; 
	BlowOff[4].M_Off(); 
	BlowOffSucceded[4] := FALSE;
END_IF

T_GantryKOTimer(PT:=T#600S);
T_GantryKOMaxTimer(PT:=T#600S);


(*Cycle State's*)
CASE miCycleState OF
	0: // Wait for start
		IF mxStopCycle THEN
			mxStopCycle:= FALSE;		
			miStopState:= miCycleState;
			miCycleState:= 15;		
		ELSIF mxStartCycle THEN
			mxStartCycle:= FALSE;
			mxIsEmpty:= FALSE;
			mxProductPickedUp:= FALSE;
			miCycleState:= 1;
		END_IF	

	1: // (P) Wait for product ready at takeout 
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;			
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;		
			miStopState:= miCycleState;
			miCycleState:= 15;
		ELSIF mxStopCycleEmpty THEN
			mxStopCycleEmpty := FALSE;
			miCycleState:=0;
		ELSIF mxProductReadyAtTakeout THEN
			mxProductReadyAtTakeout:= FALSE;
			mxIsEmpty:= FALSE;
			mxProductPickedUp:= FALSE;
			mxSwitchVacuumOn[1]:= TRUE;	// Switch vacuum on all sections
			mxSwitchVacuumOn[2]:= TRUE;	// Switch vacuum on all sections
			mxSwitchVacuumOn[3]:= TRUE;	// Switch vacuum on all sections
			mxSwitchVacuumOn[4]:= TRUE;	// Switch vacuum on all sections
			
			miCycleState:= 2;
		END_IF
	
	2: // (P) Move Vertical down to pickup position
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= ProdParameters.PositionVerticalPickup, Velocity:= MachParameters.Vert_VelocityAuto) THEN
			miCycleState:= 3;
		END_IF
	
	3: // (P) Wait at pickup position 
		T_WaitAtPickupPosition.IN:= TRUE;
	
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF T_WaitAtPickupPosition.Q THEN
			T_WaitAtPickupPosition.IN:= FALSE;
			mxProductPickedUp:= TRUE;
			miCycleState:= 4;
		END_IF		

	4: // (NP) Move vertical up to transport position
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= MachParameters.Vert_PositionTransport, Velocity:= MachParameters.Vert_VelocityAuto) THEN		
			miCycleState:= 5;
		END_IF
	
	5: // (NP) Move horizontal to the back to drop-off position 
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF HorizontalAxis.M_MoveAbsolute(Position:= MachParameters.PositionHorizontalDropOff, Velocity:= MachParameters.Hor_VelocityAuto) THEN
			mxProductPickedUp := FALSE;
			miCycleState:= 6;
		END_IF

	6: // (NP) Move Vertical Axis down to drop off position. 
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= ProdParameters.PositionVerticalDropOff, Velocity:= MachParameters.Vert_VelocityAuto) THEN
			GantrySingleKo:= TIME_TO_REAL(T_GantryKOTimer.ET);			
			T_GantryKOTimer.IN:= FALSE;
			T_GantryKOMaxTimer.IN:= TRUE;
			Gantry_InPositionAtBelt := TRUE;
			miCycleState:= 7;
		END_IF

	7: // (NP) Await blowoff puls 1 from speed control
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF NrOfSheets >= 1 THEN
			IF BlowoffPulse[3] THEN //MZE 20190401 blowoff changed because of different direction then HLU
				mxSwitchVacuumOn[3] := FALSE; //MZE 20190314 changed to individual mxSwitchVacuum Settings
				VacuumValve[3].M_Off();
				BlowOff[3].M_On();
				T_BlowOff3.IN :=TRUE;
				BlowOffSucceded[3] := TRUE;
				
				T_GantryKOTimer.IN:= TRUE;	
				T_GantryKOMaxTimer.IN:= FALSE;
				GantrySingleMaxKo:= TIME_TO_REAL(T_GantryKOMaxTimer.ET);
			// OEE Calculate products made
			MachParameters.SheetsProduced := MachParameters.SheetsProduced + 1;
			MachParameters.ProductsProduced := MachParameters.ProductsProduced + NrOfCavities;
			miCycleState:= 8;
			END_IF
		ELSE
			miCycleState:=11;
		END_IF
		
	8: // (NP) Await blowoff puls 2 from speed control
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF NrOfSheets >= 2 THEN
			IF BlowoffPulse[2] THEN
				mxSwitchVacuumOn[2] := FALSE; //MZE 20190314 changed to individual mxSwitchVacuum Settings
				VacuumValve[2].M_Off();
				BlowOff[2].M_On();
				T_BlowOff2.IN :=TRUE;
				BlowOffSucceded[2] := TRUE;
			// OEE Calculate products made
			MachParameters.SheetsProduced := MachParameters.SheetsProduced + 1;
			MachParameters.ProductsProduced := MachParameters.ProductsProduced + NrOfCavities;
			miCycleState:= 9;
			END_IF
		ELSE
			miCycleState:=11;
		END_IF
		
	9: // (NP) Await blowoff puls 3 from speed control
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF NrOfSheets >= 3 THEN
			IF BlowoffPulse[1] THEN //MZE 20190401 blowoff changed because of different direction then HLU
				mxSwitchVacuumOn[1] := FALSE; //MZE 20190314 changed to individual mxSwitchVacuum Settings
				VacuumValve[1].M_Off();
				BlowOff[1].M_On();
				T_BlowOff1.IN :=TRUE;
				BlowOffSucceded[1] := TRUE;
			// OEE Calculate products made
			MachParameters.SheetsProduced := MachParameters.SheetsProduced + 1;
			MachParameters.ProductsProduced := MachParameters.ProductsProduced + NrOfCavities;
			miCycleState:= 10;
			END_IF
		ELSE
			miCycleState:=11;
		END_IF
		
	10: // (NP) Await blowoff puls 4 from speed control
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF NrOfSheets >= 4 THEN
			IF BlowoffPulse[4] THEN
				mxSwitchVacuumOn[4] := FALSE; //MZE 20190314 changed to individual mxSwitchVacuum Settings
				VacuumValve[4].M_Off();
				BlowOff[4].M_On();
				T_BlowOff4.IN :=TRUE;
				BlowOffSucceded[4] := TRUE;
			// OEE Calculate products made
			MachParameters.SheetsProduced := MachParameters.SheetsProduced + 1;
			MachParameters.ProductsProduced := MachParameters.ProductsProduced + NrOfCavities;
			miCycleState:= 11;
			END_IF
		ELSE
			miCycleState:=11;
		END_IF
			
	11: // (P) Move vertical to transport position.
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;			
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;			
			miStopState:= miCycleState;
			miCycleState:= 15;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= MachParameters.Vert_PositionTransport, Velocity:= MachParameters.Vert_VelocityAuto) THEN
			Gantry_InPositionAtBelt := FALSE;
			miCycleState:= 12;
		END_IF

	12:	// (P) Move Horizontal to rest position.
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;	
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 15;
		ELSIF HorizontalAxis.M_MoveAbsolute(Position:= MachParameters.PositionHorizontalPickup, Velocity:= MachParameters.Hor_VelocityAuto) THEN
			miCycleState:= 13;
		END_IF

	13:	// (P) Move vertical to await pickup pos
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;	
			miCycleState:= 25;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 15;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= ProdParameters.PositionVerticalPickup + MachParameters.Vert_PickUpRestPosOffset, Velocity:= MachParameters.Vert_VelocityAuto) THEN
			mxIsEmpty:= TRUE;
			


			
			miCycleState:= 1;
		END_IF
		
	15: // [Pausing] stop horizontal and vertical axis.
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSE 
			VerticalAxis.M_Stop();
			HorizontalAxis.M_Stop();		
			miCycleState:= 16;
		END_IF
	
	16:	// [Pausing] Await horizontal and vertical axis standstill.
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF (HorizontalAxis.axStatus.StandStill OR NOT HorizontalAxis.axStatus.Moving) AND (VerticalAxis.axStatus.StandStill OR NOT VerticalAxis.axStatus.Moving) THEN
			miCycleState:= 17;
			Gantry_InPositionAtBelt := FALSE;
		END_IF

	17: // [Paused] Await restart
		T_GantryKOTimer.IN:= FALSE;
		GantrySingleKo:= TIME_TO_REAL(T_GantryKOTimer.ET);
		T_GantryKOMaxTimer.IN:= FALSE;
		GantrySingleMaxKo:= TIME_TO_REAL(T_GantryKOMaxTimer.ET);
		
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF mxStartCycle THEN
			mxStartCycle:= FALSE;
			miCycleState:= miStopState;
		END_IF

	25:	// [Direct stop]
		mxInitialized:= FALSE;
		mxStartCycle:= FALSE;
		mxStopCycle:= FALSE;
		mxStopDirect:= FALSE;

		mxIsEmpty:= FALSE;
		mxProductPickedUp:= FALSE;
		VerticalAxis.M_Stop();
		HorizontalAxis.M_Stop();	
		
		T_WaitAtPickupPosition.IN:= FALSE;
		T_BlowOff1.IN:= FALSE;
		T_BlowOff2.IN:= FALSE;
		T_BlowOff3.IN:= FALSE;
		T_BlowOff4.IN:= FALSE;

		VacuumValve[1].M_Off();
		VacuumValve[2].M_Off();
		VacuumValve[3].M_Off();
		VacuumValve[4].M_Off();
		
		T_GantryKOTimer.IN:= FALSE;
		GantrySingleKo:= TIME_TO_REAL(T_GantryKOTimer.ET);
		T_GantryKOMaxTimer.IN:= FALSE;
		GantrySingleMaxKo:= TIME_TO_REAL(T_GantryKOMaxTimer.ET);
		
		mxStopCycleEmpty := FALSE;
		Gantry_InPositionAtBelt := FALSE;
		
		miCycleState:= 0;
END_CASE

mxCheckforVacuumError := (miCycleState >=1) AND (miCycleState <=6);
mxCycleBusy:= miCycleState<>0 AND NOT (miCycleState=17);
mxInPause:= miCycleState=17;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Error" Id="{05bb1052-d95e-4ab8-8ba0-ccbc2e4ec32c}">
      <Implementation>
        <ST><![CDATA[SR_exCollision(SET1:= NOT ixCollision AND NOT mxDisableCollision, RESET:= mxReset, Q1=> Errors.Collision);
SR_exEndLimitHorFront(SET1:= NOT ixEndLimitHorFront, RESET:= mxReset, Q1=> Errors.EndLimitHorFront);
SR_exEndLimitHorBack(SET1:= NOT ixEndLimitHorBack, RESET:= mxReset, Q1=> Errors.EndLimitHorBack);
SR_exEndLimitVertUp(SET1:= NOT ixEndLimitVertUp, RESET:= mxReset, Q1=> Errors.EndLimitVertUp);
SR_exEndLimitVertDown(SET1:= NOT ixEndLimitVertDown, RESET:= mxReset, Q1=> Errors.EndLimitVertDown);

T_VacSensor[1](IN:= VacuumValve[1].mxIsOn, PT:= T#3S);
SR_exProductLost[1](
		SET1:= MachParameters.EnableVacuumSection[1] AND mxCheckforVacuumError AND VacuumValve[1].mxIsOn AND (T_VacSensor[1].Q AND NOT ixVacuumSensor[1]) , 
		RESET:= mxReset, Q1=> Errors.ProductLost[1]);
		
T_VacSensor[2](IN:= VacuumValve[2].mxIsOn, PT:= T#3S);
SR_exProductLost[2](
		SET1:= MachParameters.EnableVacuumSection[2] AND mxCheckforVacuumError AND VacuumValve[2].mxIsOn AND (T_VacSensor[2].Q AND NOT ixVacuumSensor[2]) , 
		RESET:= mxReset, Q1=> Errors.ProductLost[2]);
		
T_VacSensor[3](IN:= VacuumValve[3].mxIsOn, PT:= T#3S);
SR_exProductLost[3](
		SET1:= MachParameters.EnableVacuumSection[3] AND mxCheckforVacuumError AND VacuumValve[3].mxIsOn AND (T_VacSensor[3].Q AND NOT ixVacuumSensor[3]) , 
		RESET:= mxReset, Q1=> Errors.ProductLost[3]);
		
T_VacSensor[4](IN:= VacuumValve[4].mxIsOn, PT:= T#3S);
SR_exProductLost[4](
		SET1:= MachParameters.EnableVacuumSection[4] AND mxCheckforVacuumError AND VacuumValve[4].mxIsOn AND (T_VacSensor[4].Q AND NOT ixVacuumSensor[4]) , 
		RESET:= mxReset, Q1=> Errors.ProductLost[4]);

(*************************************************************************************************)
mxErrorInit:= Errors.Collision OR Errors.EndLimitHorFront OR Errors.EndLimitHorBack OR Errors.EndLimitVertUp OR Errors.EndLimitVertDown OR
	HorizontalAxis.ErrorStop OR VerticalAxis.ErrorStop;
mxErrorStopinPos:= FALSE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Init" Id="{881751bc-85ad-412a-b591-7b792cb81755}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxInitTransitionState:=(miInitState<>miInitOldstate);
(*State text*)
sInitStateText:=sInitStateTextDef[miInitState];
(*Timeout Watchdog for Statemachine*)
mxInitTimeoutEnable:=NOT (miInitState=0)  AND NOT mxReset;

InitTimeout(IN:=mxInitTimeoutEnable  , PT:=tInitStateTimeouts[miInitState] );
InitTimeOutUpFlank(CLK:=InitTimeout.Q );
miInitOldstate:=miInitState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF InitTimeOutUpFlank.Q THEN
	exInitTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetInitState THEN
	mxResetInitState:=FALSE;
	miInitState:=0;
	miInitOldstate:=miInitState;
	mxInitTransitionState:=FALSE;
	mxInitialized:= FALSE;	
	mxStartInit:= FALSE;
	mxStopInit:= FALSE;
END_IF

(*Definition State has Error*)
mxInitHasError:=FALSE;

(*Init State's*)
CASE miInitState OF
	
	0:	// Wait for start initalisation
		IF mxStartInit THEN
			mxStartInit:= FALSE;
			mxInitialized:= FALSE;
			//mxSwitchBlowOffOn:= FALSE;	// Don't turn vacuum off, turn blowoff off 
			miInitState:= 1;
		END_IF

	1: // Move vertical up 
		IF mxStopInit THEN
			mxStopInit:= FALSE;
			miInitState:= 10;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= MachParameters.Vert_PositionTransport, Velocity:= MachParameters.Vert_VelocityAuto) THEN
			miInitState:= 2;			
		END_IF

	2: // Move to horizontal rest position (which is also horizontal point of pickup).
		IF mxStopInit THEN
			mxStopInit:= FALSE;
			miInitState:= 10;
		ELSIF HorizontalAxis.M_MoveAbsolute(Position:= MachParameters.PositionHorizontalPickup, Velocity:= MachParameters.Hor_VelocityAuto) THEN	
			miInitState:= 3;			
		END_IF
		
	3: // Move to vertical rest position
		IF mxStopInit THEN
			mxStopInit:= FALSE;
			miInitState:= 10;
		ELSIF VerticalAxis.M_MoveAbsolute(Position:= ProdParameters.PositionVerticalPickup + MachParameters.Vert_PickUpRestPosOffset, Velocity:= MachParameters.Vert_VelocityAuto) THEN
			mxInitialized:= TRUE;
			miInitState:= 0;			
		END_IF

	10: // Stopping initalisation
		mxInitialized:= FALSE;	
		mxStartInit:= FALSE;
		mxStopInit:= FALSE;
		VerticalAxis.M_Stop();
		HorizontalAxis.M_Stop();
		miInitState:= 0;
		
END_CASE

mxInitBusy:= miInitState<>0;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_StartCycle" Id="{b3d619fb-9a6a-470c-af33-50adf215b18b}">
      <Declaration><![CDATA[METHOD M_StartCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxCycleBusy THEN
	mxStartCycle:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartInit" Id="{7bd8aafa-511b-4a28-b95d-080cb2f9f6bf}">
      <Declaration><![CDATA[METHOD M_StartInit
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxInitBusy THEN
	mxStartInit:= TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopCycle" Id="{7d44c36c-e6eb-473d-ba72-acaf2ed26a6b}">
      <Declaration><![CDATA[METHOD M_StopCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mxStopCycle:= TRUE; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopCycleEmpty" Id="{a21973e0-8652-48c6-b70c-3a4f0878b5b8}">
      <Declaration><![CDATA[METHOD M_StopCycleEmpty
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN 
	mxStopCycleEmpty:= TRUE; 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopDirect" Id="{a9f40ebc-f527-4cd7-86f5-d61f2c026935}">
      <Declaration><![CDATA[METHOD M_StopDirect
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxStopDirect:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopInit" Id="{c07af727-e87e-4ef4-8512-cc5f9ac6ac46}">
      <Declaration><![CDATA[METHOD M_StopInit
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxInitBusy THEN 
	mxStopInit:= TRUE; 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Action Name="Objects" Id="{b346841c-6e61-425f-9976-22029e62eb23}">
      <Implementation>
        <ST><![CDATA[HorizontalAxis(
	mxEnable:= NOT mxEmergency, 
	mxInhibit:= FALSE, 
	mxAutoMode:= mxAutoMode, 
	mxReset:= mxReset, 
	mxFirstCycle:= 	mxFirstCycle,
	mxEmergency:= mxEmergency, 
	mxSimulation:= , 
	mxResetCycle:= , 
	mxDisable_Positive:= NOT ixEndLimitHorFront, 
	mxDisable_Negative:= NOT ixEndLimitHorBack, 
	mxBlockHMI:= , 
	mrOverride:= 100.0,
	mrVelocityManual:= MachParameters.Hor_VelocityManual,
	mrHomePos:= MachParameters.Hor_PositionHome, 
	SysParameters:= SysParameters.HorizontalAxis,
	mxCycleBusy=> , 
	mxRunning=> , 
	Errors=> Errors.HorizontalNCAxisError, 
	Error=> , 
	ErrorStop=> , 
	axStatus=> , 
	mxAxisIsMoving=> mxHorizontalIsMoving,
	ActPosition=> mrActPosHorizontal, 
	ActVelocity=> , 
	axAxis=> );
	
VerticalAxis(
	mxEnable:= NOT mxEmergency, 
	mxInhibit:= FALSE, 
	mxAutoMode:= mxAutoMode, 
	mxReset:= mxReset, 
	mxFirstCycle:= 	mxFirstCycle,
	mxEmergency:= mxEmergency, 
	mxSimulation:= , 
	mxResetCycle:= , 
	mxDisable_Positive:= NOT ixEndLimitVertUp, 
	mxDisable_Negative:= (NOT ixEndLimitVertDown) OR Errors.Collision, 
	mxBlockHMI:= , 
	mrOverride:= 100.0, 
	mrVelocityManual:= MachParameters.Vert_VelocityManual, 
	mrHomePos:= MachParameters.Vert_PositionHome, 
	SysParameters:= SysParameters.VerticalAxis,
	mxCycleBusy=> , 
	mxRunning=> , 
	Errors=> Errors.VerticalNCAxisError, 
	Error=> , 
	ErrorStop=> , 
	axStatus=> , 
	mxAxisIsMoving=> mxVerticalIsMoving,
	ActPosition=> mrActPosVertical, 
	ActVelocity=> , 
	axAxis=> );

FOR miVacSection:= 1 TO 6 DO	
	VacuumValve[miVacSection](
		mxReset:= mxReset, 
		mxEmergency:= mxEmergency, 
		mxAutoMode:= mxAutoMode, 
		mxIsOn=> );
END_FOR
FOR miBlowOffSection:= 1 TO 6 DO
	BlowOff[miBlowOffSection](
		mxReset:= mxReset, 
		mxEmergency:= mxEmergency, 
		mxAutoMode:= mxAutoMode, 
		mxIsOn=> );
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_Gantry">
      <LineId Id="120" Count="3" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.Cycle">
      <LineId Id="1010" Count="28" />
      <LineId Id="1419" Count="0" />
      <LineId Id="1039" Count="5" />
      <LineId Id="1420" Count="1" />
      <LineId Id="1423" Count="2" />
      <LineId Id="1422" Count="0" />
      <LineId Id="1410" Count="1" />
      <LineId Id="1384" Count="1" />
      <LineId Id="1395" Count="1" />
      <LineId Id="1045" Count="42" />
      <LineId Id="1387" Count="0" />
      <LineId Id="1393" Count="1" />
      <LineId Id="1388" Count="0" />
      <LineId Id="1088" Count="21" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1409" Count="0" />
      <LineId Id="1408" Count="0" />
      <LineId Id="1110" Count="15" />
      <LineId Id="1130" Count="9" />
      <LineId Id="1144" Count="9" />
      <LineId Id="1158" Count="7" />
      <LineId Id="1170" Count="8" />
      <LineId Id="1183" Count="0" />
      <LineId Id="1389" Count="1" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1415" Count="0" />
      <LineId Id="1184" Count="6" />
      <LineId Id="1195" Count="6" />
      <LineId Id="1399" Count="0" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1400" Count="1" />
      <LineId Id="1202" Count="12" />
      <LineId Id="1219" Count="19" />
      <LineId Id="1243" Count="19" />
      <LineId Id="1267" Count="16" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1285" Count="7" />
      <LineId Id="1416" Count="0" />
      <LineId Id="1293" Count="23" />
      <LineId Id="1386" Count="0" />
      <LineId Id="1371" Count="0" />
      <LineId Id="1373" Count="1" />
      <LineId Id="1317" Count="18" />
      <LineId Id="1417" Count="0" />
      <LineId Id="1336" Count="2" />
      <LineId Id="1379" Count="0" />
      <LineId Id="1381" Count="0" />
      <LineId Id="1380" Count="0" />
      <LineId Id="1403" Count="0" />
      <LineId Id="1402" Count="0" />
      <LineId Id="1339" Count="24" />
      <LineId Id="1426" Count="0" />
      <LineId Id="1428" Count="2" />
      <LineId Id="1427" Count="0" />
      <LineId Id="1375" Count="0" />
      <LineId Id="1377" Count="0" />
      <LineId Id="1404" Count="1" />
      <LineId Id="1376" Count="0" />
      <LineId Id="1412" Count="1" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1364" Count="2" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1367" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.Error">
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="125" Count="9" />
      <LineId Id="136" Count="7" />
      <LineId Id="124" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.Init">
      <LineId Id="32" Count="20" />
      <LineId Id="228" Count="1" />
      <LineId Id="226" Count="1" />
      <LineId Id="56" Count="6" />
      <LineId Id="233" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="191" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="205" Count="2" />
      <LineId Id="217" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="234" Count="6" />
      <LineId Id="242" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="225" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.M_StartCycle">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.M_StartInit">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.M_StopCycle">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.M_StopCycleEmpty">
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.M_StopDirect">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.M_StopInit">
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Gantry.Objects">
      <LineId Id="164" Count="4" />
      <LineId Id="195" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="5" />
      <LineId Id="202" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="180" Count="3" />
      <LineId Id="192" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="152" Count="3" />
      <LineId Id="197" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="137" Count="4" />
      <LineId Id="160" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="142" Count="5" />
      <LineId Id="194" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="34" Count="3" />
      <LineId Id="33" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>