<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_ProductForming_OLD" Id="{80ff7536-b54f-4bec-bd14-9ce8fed23067}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ProductForming_OLD
VAR CONSTANT
	sCycleStateTextDef: ARRAY[0..25]  OF STRING :=	
		['State 0: Wait for Start',
		'State 1: Start wire spray',
		'State 2: Move pond up',
		'State 3: Pond up, await pond up wait time',
		'State 4: Open pulp feeding valve and bubble valve',
		'State 5: Await feeding and bubble time',
		'State 6: Open the vacuum valve and await forming time',
		'State 7: Move pond down',
		'State 8: Start flash spray',
		'State 9: Start after vacuum time and await pre ignition time',
		'State 10: Await after vacuum time done',
		'State 11: Wait for transfer at down position',
		'State 12: Await after blow off time',
		'State 13: ',
		'State 14: ',
		'State 15: ',
		'State 16: ',
		'State 17: ',
		'State 18: ',
		'State 19: ',
		'State 20: Stop cycle state',
		'State 21: Stop direct state'
		];
	
	tCycleStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,
		T#10S];

	sInitStateTextDef: ARRAY[0..10] OF STRING :=
		['State 0: Wait for Start',
		'State 1: Move machinepond down',
		'State 2: Move the spraybar to the rest position',
		'State 3: Description Init State 3',
		'State 4: Description Init State 4',
		'State 5: Description Init State 5',
		'State 6: Description Init State 6',
		'State 7: Description Init State 7',
		'State 8: Description Init State 8',
		'State 9: Description Init State 9',
		'State 10: Stop init state'];

	tInitStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S
		,T#10S];
END_VAR

VAR_INPUT
	mxResetCycleState				: BOOL;
	mxResetInitState				: BOOL;
	mxForceInit						: BOOL; (*Reset Calibration Flag*)
	mxReset							: BOOL;	(*Reset Error*)
	mxEmergency						: BOOL;
	mxAutoMode						: BOOL; (* TRUE = Automode *)
	mxStartCycle					: BOOL;
	mxEmptyMachine					: BOOL;
	mxFirstCycle					: BOOL;
	
	mxAfterVacuumDoneMoveTransferDown			: BOOL; (* Reset at main cycle *)
	mxTransferIsDown							: BOOL;(* Reset in cycle *)
	
	mxStartTransferMoldVacuum: BOOL;

	mxAfterBlowOffIsOn			: BOOL;
	RHSR_Blocked 					: BOOL;
END_VAR
VAR_IN_OUT
	MachParameters					: ST_ProductFormingMachPar;
	SysParameters					: ST_ProductFormingSysPar;
END_VAR
VAR_OUTPUT
(*Errors*)
	Errors							: ST_ProductFormingErrors;
	mxErrorInit						: BOOL;		(* Error, stop immediately. Initialisation neccesary *)
	mxErrorStopinPos				: BOOL;		(* Error, stop in position. Only reset neccesary *)

(* State vars *)
	mxCycleBusy						: BOOL;
	mxInitBusy						: BOOL;
	
(* Vars *)
	mxInitialized					: BOOL;

	mxCilIsMovingIn						: BOOL;
	mxCilIsMovingOut					: BOOL;
	mxCilIsIn							: BOOL;
	mxCilIsOut							: BOOL;	
	mxSprayBarAtRestPos					: BOOL;
END_VAR
VAR
(* State vars *)
	miCycleState					: INT :=0;
	miCycleOldstate					: INT :=0;
	mxCycleTransitionState			: BOOL := FALSE;
	sCycleStateText					: STRING;
	exCycleTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	CycleTimeout					: TON;
	CycleTimeOutUpFlank				: R_TRIG;
	mxCycleTimeoutEnable			: BOOL;
	CycleTime						: REAL;
	mxCycleHasError					: BOOL;
	miStopState						: INT;
	mxStopCycle						: BOOL;
	mxStopDirect					: BOOL;
	
	miInitState						: INT	:=0;
	miInitOldstate					: INT	:=0;
	mxInitTransitionState			: BOOL	:= FALSE;
	sInitStateText					: STRING;
	exInitTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	InitTimeout						: TON;
	InitTimeOutUpFlank				: R_TRIG;
	mxInitTimeoutEnable				: BOOL;
	InitTime						: REAL;
	mxInitHasError					: BOOL;
	mxStartInit						: BOOL;
	mxStopInit						: BOOL;
	
(* Objects *)
(* Forming Mold *)
	MoldVacuum						: FB_MonoValveNoFdbck;							
	MoldBlowOff						: FB_MonoValveNoFdbck;
(* MachinePond *)
	PondHydraulicCilinder			: FB_HydraulicCilinder;
	//HydroPump						: FB_Motor;
	FeedingPulp						: FB_MonoValve2Fdbck;
	Drain							: FB_BiValve2Fdbck;
(* SprayBar *)	
	WireSprayValve					: FB_MonoValveNoFdbck;
	FlashSprayValve					: FB_MonoValveNoFdbck;
	SprayBarMotor					: FB_NCAxis;	

	(* Interface signals pulp tanks, plup supply*)
	ixPulpTank01					AT %I*: BOOL;
	ixPulpTank02					AT %I*: BOOL;
	
	TankLevel01						: FB_AnalogIn4_20mA;
	TankLevel02						: FB_AnalogIn4_20mA;
	
(* Vars *)

	T_PondUpWaitTime	: TON;
	T_FeedingPulp		: TON;
	T_Bubble			: TON;
	T_FormingTime		: TON;
	T_FormingVacuum		: TON;
	T_AfterVacuum		: TON;
	
	T_FirstVacuum		: TON;
	T_SecondVacuum		: TON;
	T_ThirdVacuum		: TON;
	
	T_BlowOff			: TON;
	T_AfterBlowOff		: TON;
	T_PreIgnitionTime	: TON;
	
	FormingVacuumTime	: TIME;
	

	miWireSprayInterval	: INT;
	mxMoveForward		: BOOL;
	miFlashSprayInterval: INT;

	
	RT_ixPulpTank01		: R_TRIG;
	RT_ixPulpTank02		: R_TRIG;
	RT_FlashSprayStarted: R_TRIG;
	RT_InitBusy			: R_TRIG;

	mxPreIgnitionActive	: BOOL;

	mxSprayBarAtRestPosFront: BOOL;
	mxSprayBarAtRestPosBack: BOOL;
	T_SprayDelayTime	: TON;
	T_CycleTimeForKickoffs: TON;
	ActTimeSingleKO		: REAL;
	SR_TanksAreAllmostEmpty: SR;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Error();
Init();
Cycle();
Objects();

mxSprayBarAtRestPos:= mxSprayBarAtRestPosFront OR mxSprayBarAtRestPosBack;
	
mxSprayBarAtRestPosFront := ((SprayBarMotor.ActPosition <= MachParameters.SprayBar.PositionRestFront + 5) AND (SprayBarMotor.ActPosition >= MachParameters.SprayBar.PositionRestFront - 5));
mxSprayBarAtRestPosBack := ((SprayBarMotor.ActPosition <= MachParameters.SprayBar.PositionRestBack + 5) AND (SprayBarMotor.ActPosition >= MachParameters.SprayBar.PositionRestBack - 5));]]></ST>
    </Implementation>
    <Action Name="Cycle" Id="{3a4fae24-cfb3-43da-adec-f4e6f5874afa}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxCycleTransitionState:=(miCycleState<>miCycleOldstate);
(*State text*)
sCycleStateText:=sCycleStateTextDef[miCycleState];
(*Timeout Watchdog for Statemachine*)
mxCycleTimeoutEnable:=NOT (miCycleState=0) AND NOT mxReset;

CycleTimeout(IN:=mxCycleTimeoutEnable, PT:=tCycleStateTimeouts[miCycleState] );
CycleTimeOutUpFlank(CLK:=CycleTimeout.Q );
miCycleOldstate:=miCycleState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF CycleTimeOutUpFlank.Q THEN
	exCycleTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetCycleState THEN
	mxResetCycleState:= FALSE;
	mxInitialized := FALSE;
	miCycleState:=0;
	miCycleOldstate:=miCycleState;
	mxCycleTransitionState:=FALSE;

	mxStartTransferMoldVacuum:= FALSE;
	mxAfterVacuumDoneMoveTransferDown := FALSE;
	mxAfterBlowOffIsOn := FALSE;
	mxStartCycle:= FALSE;
	mxStopCycle:= FALSE;
	mxStopDirect:=FALSE;

	T_PondUpWaitTime.IN:= FALSE;
	T_FeedingPulp.IN:= FALSE;
	T_Bubble.IN:= FALSE;
	T_FormingVacuum.IN:= FALSE;
	T_AfterVacuum.IN:= FALSE;
	T_AfterBlowOff.IN:= FALSE;
	T_SprayDelayTime.IN:= FALSE;
	T_CycleTimeForKickoffs.IN := FALSE;
	SprayBarMotor.M_Stop();
	
END_IF

(*Definition State has Error*)
mxCycleHasError:=FALSE;

T_PondUpWaitTime(IN:= , PT:= MachParameters.MachinePond.PondUpWaitTime);
T_FeedingPulp(IN:= , PT:= MachParameters.MachinePond.FeedingPulpTime); 
T_Bubble(IN:= , PT:= MachParameters.FormingMold.BubbleTime);
T_AfterVacuum(IN:= , PT:= MachParameters.FormingMold.AfterVacuumTime);
T_BlowOff(IN:=, PT:=MachParameters.FormingMold.BlowOffTime);
T_AfterBlowOff(IN:= , PT:= MachParameters.FormingMold.AfterBlowOffTime);
T_PreIgnitionTime(IN:=, PT:= MachParameters.FormingMold.PreIgnitionTime);
T_SprayDelayTime(IN:=, PT:=MachParameters.SprayBar.SprayDelayTime);
T_CycleTimeForKickoffs(IN:=, PT:=T#250S);

(* Set Forming vacuum time when switch over to next pulp tank,
Increase when flah spray is started*)
RT_ixPulpTank01(CLK:= ixPulpTank01);
RT_ixPulpTank02(CLK:= ixPulpTank02);
RT_InitBusy(CLK:= mxInitBusy);
RT_FlashSprayStarted(CLK:= miCycleState = 8);
	
IF RT_ixPulpTank01.Q OR RT_ixPulpTank02.Q OR RT_InitBusy.Q OR TRUE THEN // ----------------------------------------------------------------------------------- TRUE Weghalen wanneer wissel signaal actief
	FormingVacuumTime:= MachParameters.FormingMold.VacuumTime;
ELSIF RT_FlashSprayStarted.Q AND FALSE THEN								// ----------------------------------------------------------------------------------- IDEM voor false.
	IF ixPulpTank01 THEN
		FormingVacuumTime := FormingVacuumTime + (REAL_TO_TIME((TIME_TO_REAL(MachParameters.FormingMold.VacuumTimeIncr ) / 70.0) * (75 -  TankLevel01.EngUnits))); 
	ELSIF ixPulpTank02 THEN
		FormingVacuumTime := FormingVacuumTime + (REAL_TO_TIME((TIME_TO_REAL(MachParameters.FormingMold.VacuumTimeIncr ) / 70.0) * (75 -  TankLevel02.EngUnits))); 
	END_IF
END_IF

T_FormingVacuum(IN:= , PT:= FormingVacuumTime);

// Shut the vacuum of after the aftervacuum time (timer gets started in step 7).
IF T_AfterVacuum.Q THEN	
	T_AfterVacuum.IN:= FALSE;
	MoldVacuum.M_Off();
END_IF


IF T_FeedingPulp.Q THEN FeedingPulp.M_Close(); END_IF

			
(*Cycle State's*)
CASE miCycleState OF
	(* 
	-Start wire spray
	-move pond up
	-Start pond up wait time
	-Open feeding pulp/blow off valve (bubble)
	-Start feeding time / bubble time
	-Close feeding valve/blow off valve/start vacuum + timer
	-Wait for vacuum timer
	-move pond down
	-Start flash spray
	-Start after vacuum timer/Pre-ignition timer
	-After vacuum time is done, -> Move down to Transfer Mold
	-Wait for transfer down 	<- from transfer mold
	-Open blow off valve
						-Start forming timer
	-Start blow off timer
	-Signal to transfer 		-> Move up to transfer mold
	-Wait for start forming (start cycle)		<- from transfer mold
	
	*)
	
	0:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle AND mxEmptyMachine THEN
			mxEmptyMachine:= FALSE;
			T_CycleTimeForKickoffs.IN := FALSE;	// Start timer to measure the cycle time of the transfer mold.
			
			miCycleState:= 0;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;

			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF mxStartCycle THEN
			mxStartCycle:= FALSE;
			T_CycleTimeForKickoffs.IN := TRUE;	// Start timer to measure the cycle time of the transfer mold.
			mxStartTransferMoldVacuum:= FALSE;
			//HydroPump.M_Start();
	
			(* If parameter = 0 then do not perform spray, if 1 then always perform spray, other: perform every x time *)
			IF MachParameters.SprayBar.WireSprayInterval > 0 AND ((miWireSprayInterval = MachParameters.SprayBar.WireSprayInterval) OR MachParameters.SprayBar.WireSprayInterval = 1) THEN
				(* Count down *)
				miWireSprayInterval:= miWireSprayInterval - 1;
				
				(* Check if at rest back position, then move forward, else move backward *)
				mxMoveForward:= FALSE;
				IF SprayBarMotor.ActPosition < MachParameters.SprayBar.PositionRestBack + 5 AND SprayBarMotor.ActPosition > MachParameters.SprayBar.PositionRestBack - 5 THEN
					mxMoveForward:= TRUE;
				END_IF	
				
				miCycleState:= 1;
			ELSE
				miWireSprayInterval:= miWireSprayInterval - 1;
			
				miCycleState:=2 ;
			END_IF
			(* Write to par if is lower then 0 *)
			IF miWireSprayInterval <=0 THEN miWireSprayInterval:= MachParameters.SprayBar.WireSprayInterval; END_IF
		END_IF
		
	(* Start Wire Spray *)
	1:
		IF mxMoveForward THEN
			IF SprayBarMotor.ActPosition >= MachParameters.SprayBar.PositionStartWireFwd THEN
				WireSprayValve.M_On();
			END_IF
			IF SprayBarMotor.ActPosition >= MachParameters.SprayBar.PositionStopWireFwd THEN
				WireSprayValve.M_Off();
			END_IF
		ELSE
			IF SprayBarMotor.ActPosition <= MachParameters.SprayBar.PositionStartWireBkw THEN
				WireSprayValve.M_On();
			END_IF
			IF SprayBarMotor.ActPosition <= MachParameters.SprayBar.PositionStopWireBkw THEN
				WireSprayValve.M_Off();
			END_IF
		END_IF
			
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF mxMoveForward  THEN
			IF SprayBarMotor.M_MoveAbsolute(Velocity:= MachParameters.SprayBar.AutoVelocity, Position:= MachParameters.SprayBar.PositionRestFront) THEN
				miCycleState:= 2;	
			END_IF
		ELSIF NOT mxMoveForward THEN
			IF SprayBarMotor.M_MoveAbsolute(Velocity:= MachParameters.SprayBar.AutoVelocity, Position:= MachParameters.SprayBar.PositionRestBack) THEN
				miCycleState:= 2;	
			END_IF
		END_IF

	(* Move Pond up *)
	2:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			PondHydraulicCilinder.M_Stop();
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF PondHydraulicCilinder.M_Move(End_Position:= MachParameters.MachinePond.PositionUpStop, Slow_Position:= MachParameters.MachinePond.PositionUpSlow) THEN

			miCycleState:= 3;
		END_IF

	(* Pond up & Wait time done *)
	3:
		T_PondUpWaitTime.IN:= TRUE;
		
		IF T_PondUpWaitTime.Q THEN
			T_PondUpWaitTime.IN:= FALSE;
			
			miCycleState:= 4;
		END_IF
		
	(* Open feeding pulp valve/blow off bubble  *) 	
	4:
		IF FeedingPulp.M_Open() THEN T_FeedingPulp.IN:= TRUE; END_IF
		IF MoldBlowOff.M_On() THEN T_Bubble.IN:= TRUE; END_IF

		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF FeedingPulp.M_Open() AND MoldBlowOff.M_On() THEN
 			
			miCycleState:= 5;
		END_IF

	(* Start feeding time, Bubble time *)
	5:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF T_Bubble.Q THEN
			MoldBlowOff.M_Off();
			T_FeedingPulp.IN:= FALSE;
			T_Bubble.IN:= FALSE;

			MoldVacuum.M_On();	// open the vacuum valve
			
			miCycleState:= 6;
		END_IF
	
	(* Open Vacuum valve (Forming) *)
	6:
		T_FormingVacuum.IN:= TRUE;
	
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF T_FormingVacuum.Q THEN
			T_FormingVacuum.IN:= FALSE;
			T_AfterVacuum.IN:= TRUE;			//  Start after vacuum time directly after forming vac time.
						
			miCycleState:= 7;
		END_IF
	
	(* Move Pond down *)
	7:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF PondHydraulicCilinder.M_Move(End_Position:= MachParameters.MachinePond.PositionDownStop, Slow_Position:= MachParameters.MachinePond.PositionDownSlow) THEN
			
			T_PreIgnitionTime.IN := TRUE;		// Bateu, Kwam uit stap 9.

			T_SprayDelayTime.IN:= TRUE;		
			
			(* If parameter = 0 then do not perform spray, if 1 then always perform spray, other: perform every x time *)
			IF MachParameters.SprayBar.FlashSprayInterval > 0 AND ((miFlashSprayInterval = MachParameters.SprayBar.FlashSprayInterval) OR MachParameters.SprayBar.FlashSprayInterval = 1) THEN
				(* Count down *)
				miFlashSprayInterval:= miFlashSprayInterval - 1;
				
				(* Check if at rest back position, then move forward, else move backward *)
				mxMoveForward:= FALSE;
				IF SprayBarMotor.ActPosition < MachParameters.SprayBar.PositionRestBack + 5 AND SprayBarMotor.ActPosition > MachParameters.SprayBar.PositionRestBack - 5 THEN
					mxMoveForward:= TRUE;
				END_IF	
				
				miCycleState:= 8;
			ELSE
				miFlashSprayInterval:= miFlashSprayInterval - 1;
			
				miCycleState:= 9;
			END_IF
			(* Write to par if is lower then 0 *)
			IF miFlashSprayInterval <=0 THEN miFlashSprayInterval:= MachParameters.SprayBar.FlashSprayInterval; END_IF

		END_IF

	(* Start flash spray *)
	8:
		IF T_SprayDelayTime.Q THEN		// await delay, delay timer gets reset one step later..
			IF mxMoveForward THEN
				IF SprayBarMotor.ActPosition >= MachParameters.SprayBar.PositionStartFlashFwd THEN
					FlashSprayValve.M_On();
				END_IF
				IF SprayBarMotor.ActPosition >= MachParameters.SprayBar.PositionStopFlashFwd THEN
					FlashSprayValve.M_Off();
				END_IF
			ELSE
				IF SprayBarMotor.ActPosition <= MachParameters.SprayBar.PositionStartFlashBkw THEN
					FlashSprayValve.M_On();
				END_IF
				IF SprayBarMotor.ActPosition <= MachParameters.SprayBar.PositionStopFlashBkw THEN
					FlashSprayValve.M_Off();
				END_IF
			END_IF
		END_IF

		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF mxMoveForward AND T_SprayDelayTime.Q THEN
			IF SprayBarMotor.M_MoveAbsolute(Velocity:= MachParameters.SprayBar.AutoVelocity, Position:= MachParameters.SprayBar.PositionRestFront) THEN

				miCycleState:= 9;	
			END_IF
		ELSIF NOT mxMoveForward AND T_SprayDelayTime.Q THEN
			IF SprayBarMotor.M_MoveAbsolute(Velocity:= MachParameters.SprayBar.AutoVelocity, Position:= MachParameters.SprayBar.PositionRestBack) THEN
		
				miCycleState:= 9;	
			END_IF
		END_IF
	
	(* Start After Vacuum timer and await pre-igintion to send transfermold down.*)
	9:
		
		T_SprayDelayTime.IN := FALSE;	// Reset the spray delay timer when it is done spraying.
	
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF T_PreIgnitionTime.Q THEN		// After preignition time, send transfermold down.
			T_PreIgnitionTime.IN:= FALSE;
			mxAfterVacuumDoneMoveTransferDown:= TRUE; // send transfermold down
			
			miCycleState:= 10;
		END_IF
		
	10:
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
			
		ELSIF TRUE THEN
(*		ELSIF T_AfterVacuum.Q THEN	
			T_AfterVacuum.IN:= FALSE;
			MoldVacuum.M_Off();
*)			
			miCycleState:= 11;
		END_IF
	

	(* Wait for transfer down *)		
	11:	
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF mxTransferIsDown THEN
			mxTransferIsDown:= FALSE;
			MoldBlowOff.M_On();	
			mxStartTransferMoldVacuum:= TRUE;
			
			miCycleState:= 12;
		END_IF
		
	12:
		T_BlowOff.IN:= TRUE;

		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF T_BlowOff.Q THEN
			T_BlowOff.IN:= FALSE;
			mxAfterBlowOffIsOn:= TRUE;
			
			
			miCycleState:= 13;
		END_IF

	(* Wait for After blow off time *)
	13:
		T_AfterBlowOff.IN:= TRUE;

		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF T_AfterBlowOff.Q THEN
			T_AfterBlowOff.IN:= FALSE;
			MoldBlowOff.M_Off();
			
			ActTimeSingleKO := TIME_TO_REAL(T_CycleTimeForKickOffs.ET);
			T_CycleTimeForKickoffs.IN := FALSE;
			miCycleState:= 0;
		END_IF
		
	(* Stop Cycle *)
	20:
		FeedingPulp.M_Close();				// on controlled stop, close the pulpfeeding valve to prevent flooding.
	
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;

			miCycleState:= 21;
		ELSIF mxStartCycle THEN
			mxStartCycle:= FALSE;
			miCycleState:= miStopState;
			T_CycleTimeForKickoffs.IN := FALSE;	
		END_IF
	
	(* Stop Direct*)
	21:
		T_PondUpWaitTime.IN:= FALSE;
		T_FeedingPulp.IN:= FALSE;
		T_Bubble.IN:= FALSE;
		T_FormingVacuum.IN:= FALSE;
		T_AfterVacuum.IN:= FALSE;
		T_AfterBlowOff.IN:= FALSE;
		T_BlowOff.IN := FALSE;
		
		T_CycleTimeForKickoffs.IN := FALSE;	// Start timer to measure the cycle time of the transfer mold.
		ActTimeSingleKO := 0;
		
	(* Forming Mold *)
		MoldVacuum.M_Off();				
		MoldBlowOff.M_Off();
	(* MachinePond *)
		PondHydraulicCilinder.M_StopDirect();
		//HydroPump.M_Stop();
		FeedingPulp.M_Close();
		Drain.M_Close();
	(* SprayBar *)	
		WireSprayValve.M_Off();
		FlashSprayValve.M_Off();
		SprayBarMotor.M_Stop();

		mxStartCycle:= FALSE;
		mxStopCycle:= FALSE;
		mxStopDirect:=FALSE;
		mxInitialized:= FALSE;

		miCycleState:= 0;

END_CASE

mxCycleBusy:= miCycleState<>0 AND NOT (miCycleState=20);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Error" Id="{d0cd77f6-1c44-41ca-8d46-8a2e586a3c69}">
      <Implementation>
        <ST><![CDATA[
Errors.Error2:= FALSE;

SR_TanksAreAllmostEmpty(SET1:=(TankLevel01.EngUnits < 5) AND (TankLevel02.EngUnits < 5), RESET:=mxReset, Q1=>);//Errors.LowLvlOnBothTanks);  



(*************************************************************************************************)
mxErrorInit:= Errors.HydraulicPump.Thermal;
mxErrorStopinPos:= Errors.MachinePond.Hydraulic.IsMovingWithoutActivation OR Errors.MachinePond.Hydraulic.PositionError;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Init" Id="{0b5bc9ba-8df4-48da-9372-ff0dd742a55e}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxInitTransitionState:=(miInitState<>miInitOldstate);
(*State text*)
sInitStateText:=sInitStateTextDef[miInitState];
(*Timeout Watchdog for Statemachine*)
mxInitTimeoutEnable:=NOT (miInitState=0)  AND NOT mxReset;

InitTimeout(IN:=mxInitTimeoutEnable  , PT:=tInitStateTimeouts[miInitState] );
InitTimeOutUpFlank(CLK:=InitTimeout.Q );
miInitOldstate:=miInitState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF InitTimeOutUpFlank.Q THEN
	exInitTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetInitState THEN
	mxResetInitState:=FALSE;
	mxInitialized:= FALSE;
	miInitState:=0;
	miInitOldstate:=miInitState;
	mxInitTransitionState:=FALSE;
	
	mxStartInit:= FALSE;
	mxStopInit:= FALSE;
END_IF

(*Definition State has Error*)
mxInitHasError:=FALSE;

CASE miInitState OF
	0:
		IF mxStartInit THEN
			mxStartInit:= FALSE;
			mxInitialized:= FALSE;

		(* Forming Mold *)
			MoldVacuum.M_Off();				
			MoldBlowOff.M_Off();
		(* MachinePond *)
			//HydroPump.M_Start();
			FeedingPulp.M_Close();
			Drain.M_Close();
		(* SprayBar *)	
			WireSprayValve.M_Off();
			FlashSprayValve.M_Off();
			(* AT init write intervals *)
			miWireSprayInterval:= MachParameters.SprayBar.WireSprayInterval;
			miFlashSprayInterval:= MachParameters.SprayBar.FlashSprayInterval;
			
			miInitState:= 1;
		END_IF

	(* Move Pond down *)	
	1:
		IF mxStopInit THEN
			mxStopInit:= FALSE;
			
			miInitState:= 10;			
		ELSIF PondHydraulicCilinder.M_Move(End_Position:= MachParameters.MachinePond.PositionDownStop, Slow_Position:= MachParameters.MachinePond.PositionDownSlow) THEN
			
			miInitState:= 2;
		END_IF				

	(* Move spraybar to rest position *)	
	2:
		IF mxStopInit THEN
			mxStopInit:= FALSE;
			
			miInitState:= 10;			
		ELSIF SprayBarMotor.M_MoveAbsolute(Position:= MachParameters.SprayBar.PositionRestBack, Velocity:= MachParameters.SprayBar.AutoVelocity) THEN
			mxInitialized:= TRUE;
			
			// stop the pump en cylinder of the pond
			//HydroPump.M_Stop();
			PondHydraulicCilinder.M_Stop();
			
			miInitState:= 0;
		END_IF

	10:
		PondHydraulicCilinder.M_Stop();
		SprayBarMotor.M_Stop();
		//HydroPump.M_Stop();
		
		mxStartInit:= FALSE;
		mxStopInit:= FALSE;
		mxInitialized:= FALSE;
		
		miInitState:= 0;
END_CASE

mxInitBusy:= miInitState<>0;
]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_EmptyMachine" Id="{8d8f241b-0c4d-4039-b0a1-22741b6555b2}">
      <Declaration><![CDATA[METHOD M_EmptyMachine
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxEmptyMachine:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartCycle" Id="{7c651314-951e-48dc-a5c0-d74f1dbf7056}">
      <Declaration><![CDATA[METHOD M_StartCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxCycleBusy THEN
	mxStartCycle:= TRUE;
	mxStopCycle:=False;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartInit" Id="{efc569e2-ccc8-4a60-b0df-61440a675c75}">
      <Declaration><![CDATA[METHOD M_StartInit
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxInitBusy THEN 
	mxStartInit:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopCycle" Id="{b25c3f7b-9656-41b8-9a93-50114b91dabf}">
      <Declaration><![CDATA[METHOD M_StopCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxStopCycle:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopDirect" Id="{d279e561-7ac6-436a-bcf0-b0e235e55175}">
      <Declaration><![CDATA[METHOD M_StopDirect
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxStopDirect:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopInit" Id="{0a55218a-8042-44d0-a334-ec66b7f67559}">
      <Declaration><![CDATA[METHOD M_StopInit
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxInitBusy THEN 
	mxStopInit:= TRUE; 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Action Name="Objects" Id="{00d8d2d1-91cd-44a9-8bd8-74a416541b8d}">
      <Implementation>
        <ST><![CDATA[
MoldVacuum(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency);

MoldBlowOff(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency);
	
PondHydraulicCilinder(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency,
	EndPositionIn:= MachParameters.MachinePond.PositionDownStop,
	EndPositionOut:= MachParameters.MachinePond.PositionUpStop,
	OffsetPosition:= MachParameters.MachinePond.PositionOffsetZero,
	OffsetAlarmPosition:= MachParameters.MachinePond.PositionOffsetAlarm,
	PositionPhysicalMeasured:=MachParameters.MachinePond.PositionPhyscialMeasured,
	PositionPhysicalMeasuredOld:=MachParameters.MachinePond.PositionPhysicalMeasuredOld,
	PhysicalOffsetPos:=MachParameters.MachinePond.PhysicalOffsetPos,
	RHSR_Blocked := RHSR_Blocked,
	SlowValveIsInverted := FALSE,
	mxIsVertical := TRUE,
	mxIsMovingIn=> mxCilIsMovingIn, 
	mxIsMovingOut=> mxCilIsMovingOut, 
	mxIsIn=> mxCilIsIn, 
	mxIsOut=> mxCilIsOut,
	Errors=> Errors.MachinePond.Hydraulic);

FeedingPulp(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency,
	MachParameters:= MachParameters.MachinePond.FeedingPulp);
	
Drain(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency,
	MachParameters:= MachParameters.MachinePond.Drain);

WireSprayValve(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency);

FlashSprayValve(
	mxReset:= mxReset,
	mxAutoMode:= mxAutoMode,
	mxEmergency:= mxEmergency);

SprayBarMotor(
	mxEnable:= NOT mxEmergency, 
	mxInhibit:=FALSE , 
	mxAutoMode:= mxAutoMode, 
	mxReset:= mxreset, 
	mxEmergency:= mxEmergency, 
	mxSimulation:= , 
	mxFirstCycle:= mxFirstCycle, 
	mxResetCycle:= , 
	mxDisable_Positive:=FALSE , 
	mxDisable_Negative:=FALSE , 
	mxBlockHMI:=FALSE , 
	mrOverride:= 100,
	mrHomePos:=MachParameters.SprayBar.PositionHome,
	mrVelocityManual:= MachParameters.SprayBar.ManualVelocity, 
	SysParameters:= SysParameters.SprayBar, 
	mxCycleBusy=> , 
	mxRunning=> , 
	Errors=> errors.SprayBar.NCAxisError, 
	Error=> , 
	ErrorStop=> , 
	axStatus=> , 
	ActPosition=> , 
	ActVelocity=> , 
	axAxis=> );
	
TankLevel01(
	EngLowLimit:= 0, 
	EngUpperLimit:= 100, 
	maOut=> , 
	EngUnits=> , 
	EngFilt=> , 
	OverRange=> , 
	UnderRange=> );
	
TankLevel02(
	EngLowLimit:= 0, 
	EngUpperLimit:= 100, 
	maOut=> , 
	EngUnits=> , 
	EngFilt=> , 
	OverRange=> , 
	UnderRange=> );




	
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_ProductForming_OLD">
      <LineId Id="318" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="319" Count="1" />
      <LineId Id="455" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="753" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.Cycle">
      <LineId Id="766" Count="17" />
      <LineId Id="1175" Count="1" />
      <LineId Id="785" Count="2" />
      <LineId Id="1197" Count="2" />
      <LineId Id="1193" Count="3" />
      <LineId Id="788" Count="5" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1292" Count="0" />
      <LineId Id="1270" Count="0" />
      <LineId Id="1178" Count="0" />
      <LineId Id="795" Count="8" />
      <LineId Id="1259" Count="0" />
      <LineId Id="804" Count="1" />
      <LineId Id="1201" Count="0" />
      <LineId Id="1303" Count="0" />
      <LineId Id="1284" Count="0" />
      <LineId Id="806" Count="9" />
      <LineId Id="1296" Count="0" />
      <LineId Id="1298" Count="0" />
      <LineId Id="1300" Count="1" />
      <LineId Id="1299" Count="0" />
      <LineId Id="817" Count="0" />
      <LineId Id="1302" Count="0" />
      <LineId Id="818" Count="1" />
      <LineId Id="1283" Count="0" />
      <LineId Id="1278" Count="0" />
      <LineId Id="1280" Count="1" />
      <LineId Id="1279" Count="0" />
      <LineId Id="1321" Count="0" />
      <LineId Id="1324" Count="0" />
      <LineId Id="1322" Count="1" />
      <LineId Id="1282" Count="0" />
      <LineId Id="820" Count="30" />
      <LineId Id="1313" Count="0" />
      <LineId Id="851" Count="7" />
      <LineId Id="1304" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="860" Count="50" />
      <LineId Id="1262" Count="0" />
      <LineId Id="911" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="1264" Count="0" />
      <LineId Id="914" Count="49" />
      <LineId Id="967" Count="9" />
      <LineId Id="1325" Count="0" />
      <LineId Id="977" Count="23" />
      <LineId Id="1320" Count="0" />
      <LineId Id="1001" Count="15" />
      <LineId Id="1271" Count="1" />
      <LineId Id="1285" Count="0" />
      <LineId Id="1275" Count="0" />
      <LineId Id="1017" Count="23" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1041" Count="14" />
      <LineId Id="1289" Count="0" />
      <LineId Id="1056" Count="10" />
      <LineId Id="1265" Count="0" />
      <LineId Id="1067" Count="1" />
      <LineId Id="1266" Count="0" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1267" Count="0" />
      <LineId Id="1070" Count="1" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1072" Count="4" />
      <LineId Id="1293" Count="1" />
      <LineId Id="1078" Count="1" />
      <LineId Id="1081" Count="2" />
      <LineId Id="1085" Count="3" />
      <LineId Id="1210" Count="0" />
      <LineId Id="1091" Count="0" />
      <LineId Id="1211" Count="0" />
      <LineId Id="1092" Count="0" />
      <LineId Id="1212" Count="1" />
      <LineId Id="1215" Count="0" />
      <LineId Id="1224" Count="0" />
      <LineId Id="1226" Count="2" />
      <LineId Id="1230" Count="1" />
      <LineId Id="1276" Count="1" />
      <LineId Id="1216" Count="2" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1222" Count="1" />
      <LineId Id="1214" Count="0" />
      <LineId Id="1093" Count="4" />
      <LineId Id="1099" Count="2" />
      <LineId Id="1103" Count="4" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1170" Count="0" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1235" Count="0" />
      <LineId Id="1240" Count="14" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1255" Count="3" />
      <LineId Id="1112" Count="17" />
      <LineId Id="1307" Count="0" />
      <LineId Id="1305" Count="0" />
      <LineId Id="1130" Count="4" />
      <LineId Id="1318" Count="1" />
      <LineId Id="1236" Count="0" />
      <LineId Id="1315" Count="2" />
      <LineId Id="1135" Count="1" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1314" Count="0" />
      <LineId Id="1139" Count="9" />
      <LineId Id="1261" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1310" Count="2" />
      <LineId Id="1150" Count="12" />
      <LineId Id="1188" Count="2" />
      <LineId Id="1163" Count="0" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1164" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.Error">
      <LineId Id="4" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.Init">
      <LineId Id="36" Count="18" />
      <LineId Id="128" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="127" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="60" Count="3" />
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="100" Count="3" />
      <LineId Id="105" Count="5" />
      <LineId Id="117" Count="2" />
      <LineId Id="89" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="111" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="80" Count="3" />
      <LineId Id="74" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.M_EmptyMachine">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.M_StartCycle">
      <LineId Id="8" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.M_StartInit">
      <LineId Id="8" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.M_StopCycle">
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.M_StopDirect">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.M_StopInit">
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProductForming_OLD.Objects">
      <LineId Id="292" Count="28" />
      <LineId Id="327" Count="35" />
      <LineId Id="409" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="363" Count="9" />
      <LineId Id="412" Count="17" />
      <LineId Id="376" Count="0" />
      <LineId Id="410" Count="1" />
      <LineId Id="390" Count="0" />
      <LineId Id="373" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>