<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_TopMold" Id="{2e250e61-b76c-4394-b65d-3dcc6d70421f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TopMold
VAR CONSTANT
	sCycleStateTextDef: ARRAY[0..25]  OF STRING :=	
		['State 0: Wait for Start',
		'State 1: Wait for signal to start move down',
		'State 2: Move down',
		'State 3: Apply drying time',
		'State 4: Start drying',
		'State 5: Move up to open position with "open" speed',
		'State 6: Move up',
		'State 7: Wait until take out unit is up',
		'State 8: Await blowoff',
		'State 9: ',
		'State 10:',
		'State 11:',
		'State 12:',
		'State 13:',
		'State 14:',
		'State 15:',
		'State 16:',
		'State 17:',
		'State 18:',
		'State 19:',
		'State 20:[Pausing] Stop hydraulic movement',																
		'State 21:[Pausing] Move topmold to Up pause position',
		'State 22:[Paused] wait for start',
		'State 23:',
		'State 24:',
		'State 25:Stop direct state'];
	
	tCycleStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,
		T#10S];

	sInitStateTextDef: ARRAY[0..10] OF STRING :=
		['State 0: Wait for Init Start',
		'State 1: Await pressure relief',
		'State 2: Move up',
		'State 3: Description Init State 3',
		'State 4: Description Init State 4',
		'State 5: Description Init State 5',
		'State 6: Description Init State 6',
		'State 7: Description Init State 7',
		'State 8: Description Init State 8',
		'State 9: Description Init State 9',
		'State 10: Stop init state'];

	tInitStateTimeouts: ARRAY[0..10] OF TIME := 
		[T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S,T#10S
		,T#10S];
END_VAR

VAR_INPUT
	mxReset							: BOOL;	(*Reset Error*)
	mxEmergency						: BOOL;
	mxDoorsOpened					: BOOL;
	mxAutoMode						: BOOL; (* TRUE = Automode *)
	mxEmptyMachine					: BOOL;
	mxEnableHeating					: BOOL;

	mxResetCycleState				: BOOL;
	mxResetInitState				: BOOL;


	mxMoveUp						: BOOL; (* Drying finished or transfer ready with new product *)
	mxTakeOutIsMovingUp				: BOOL;
	ActualPositionTransfermold		: REAL;
	RHSR_Blocked 					: BOOL;
	
	(*Signals*)
	sgMoveDown						: BOOL; (* Signal from bottommold *)
	sgTakeOutUnitDown 				: BOOL;	(* Signal from bottommold *)
	sgSample						: BOOL; // Signals that a sample was taken out
	TopLateTime 					: REAL;
END_VAR
VAR_IN_OUT
	MachParameters					: ST_TopMoldMachPar;
	ProdParameters					: ST_TopMoldProdPar;

END_VAR
VAR_OUTPUT
(*Errors*)
	Errors							: ST_TopMoldErrors;
	mxErrorInit						: BOOL;		(* Error, stop immediately. Initialisation neccesary *)
	mxErrorStopinPos				: BOOL;		(* Error, stop in position. Only reset neccesary *)

(* State vars *)
	mxCycleBusy						: BOOL;
	mxInitBusy						: BOOL;
	
(* Vars *)
	mxInitialized					: BOOL;
	

	mxCilIsMovingIn					: BOOL;
	mxCilIsMovingOut				: BOOL;
	mxCilIsIn						: BOOL;
	mxCilIsOut						: BOOL;	
	ActualPosition					: REAL;
	
	MaxDryingSingleKO				: REAL;
	
(*Signals*)
	SgTmIsUp						: BOOL;	// Signals that the topmold is up
	SgTmIsDown						: BOOL; // Signals that the topmold is down

	SgElapsedDryingTime				: TIME;
	SgTotalDryingTime				: TIME;
	sgTopmoldBlowOffReady: BOOL;
END_VAR
VAR
(* State vars *)
	miCycleState					: INT :=0;
	miCycleOldstate					: INT :=0;
	mxCycleTransitionState			: BOOL := FALSE;
	sCycleStateText					: STRING;
	exCycleTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	CycleTimeout					: TON;
	CycleTimeOutUpFlank				: R_TRIG;
	mxCycleTimeoutEnable			: BOOL;
	CycleTime						: REAL;
	mxCycleHasError					: BOOL;
	miStopState						: INT;
	mxStartCycle					: BOOL;
	mxStopCycle						: BOOL;
	mxStopDirect					: BOOL;
	
	miInitState						: INT	:=0;
	miInitOldstate					: INT	:=0;
	mxInitTransitionState			: BOOL	:= FALSE;
	sInitStateText					: STRING;
	exInitTimeOut					: BOOL;		(* Timeout for the whole programcycle *)
	InitTimeout						: TON;
	InitTimeOutUpFlank				: R_TRIG;
	mxInitTimeoutEnable				: BOOL;
	InitTime						: REAL;
	mxInitHasError					: BOOL;
	mxStartInit						: BOOL;
	mxStopInit						: BOOL;
(* Objects *)
	HydraulicCilinder				: FB_HydraulicCilinderAnalog;
	Vacuum							: FB_MonoValveNoFdbck;
	BlowOff							: FB_MonoValveNoFdbck;
	HeatingZone						: ARRAY [1..6] OF FB_Heatingzone;
(* Vars *)
	T_DryingTime					: TON;
	T_BlowOffClosed					: TON;
	RT_TakeOutIsMovingUp			: R_TRIG;
	T_DryingMoldLock				: TON;
	T_VacuumTimeClosed				: TON;
	T_BlowOff						: TON;
	RT_EnableBlowOff				: R_TRIG;
	RT_EnableVacuum					: R_TRIG;
	RT_StartBlowOffClosed: R_TRIG;
	RT_StartVacuumClosed: R_TRIG;
	T_StartVacuumAfterDrying: TON;
	RT_StartVacuumAfterDrying: R_TRIG;
	TestTime: TIME := T#24500MS;
	T_PauseDelayedUp: TON;
	DryingTime: TIME;
	DryingElapsedTime: TIME;
	mxInPause: BOOL;

	T_SingleKO: TON;
	DryingSingleKO: REAL;
	T_TmNotOnBmPosTimeOut: TON;
	SR_TmDidNotReachBmPos: SR;
	RT_StartVacuumdEndDrying: R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Error();
Init();
Cycle();
Objects();

ActualPosition := HydraulicCilinder.ActPosition;

{region "Closed vacuum and blowoff HMI stuff"}
RT_EnableBlowOff(CLK:=MachParameters.EnableClosedBlowOff);
RT_EnableVacuum(CLK:=MachParameters.EnableClosedVacuum);

IF RT_EnableBlowOff.Q THEN
	MachParameters.EnableClosedVacuum := FALSE;
END_IF

IF RT_EnableVacuum.Q THEN
	MachParameters.EnableClosedBlowOff := FALSE;
END_IF
{endregion}]]></ST>
    </Implementation>
    <Action Name="Cycle" Id="{aa84e275-3c1d-464c-ac84-bda18804604f}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxCycleTransitionState:=(miCycleState<>miCycleOldstate);
(*State text*)
sCycleStateText:=sCycleStateTextDef[miCycleState];
(*Timeout Watchdog for Statemachine*)
mxCycleTimeoutEnable:=NOT (miCycleState=0) AND NOT mxReset;

CycleTimeout(IN:=mxCycleTimeoutEnable  , PT:=tCycleStateTimeouts[miCycleState] );
CycleTimeOutUpFlank(CLK:=CycleTimeout.Q );
miCycleOldstate:=miCycleState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF CycleTimeOutUpFlank.Q THEN
	exCycleTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetCycleState THEN
	mxResetCycleState:= FALSE;
	mxInitialized := FALSE;
		
	miCycleState:=0;
	miCycleOldstate:=miCycleState;
	mxCycleTransitionState:=FALSE;

	mxStartCycle:= FALSE;
	mxStopCycle:= FALSE;
	mxStopDirect:=FALSE;
	SgTmIsDown := FALSE;
	SgTmIsUp := FALSE;
	mxMoveUp := FALSE;
	sgMoveDown := FALSE;

	T_DryingTime.IN:= FALSE;
	T_DryingMoldLock.IN:= FALSE;
	T_VacuumTimeClosed.IN:= FALSE;
	T_BlowOffClosed.IN:= FALSE;
	T_BlowOff.IN:=FALSE;
	T_SingleKO.IN:= FALSE;
	DryingSingleKO := TIME_TO_REAL(T_SingleKO.ET);
	sgTopmoldBlowOffReady := FALSE;
	T_TmNotOnBmPosTimeOut.IN:=FALSE;	
	
	HydraulicCilinder.M_Stop();
END_IF

(*Definition State has Error*)
mxCycleHasError:=FALSE;

T_PauseDelayedUp(PT:=T#300MS);
T_BlowOff(IN:=, PT:=MachParameters.BlowOffToTakeOut);
T_DryingTime(IN:= , PT:= DryingTime);
SgElapsedDryingTime := T_DryingTime.ET;
SgTotalDryingTime := T_DryingTime.PT;
T_SingleKO(PT:=T#200S);
T_TmNotOnBmPosTimeOut(IN:=, PT:=T#5S);

{region "Vacuum / Blowoff while closed"}
	T_VacuumTimeClosed(IN:= , PT:= MachParameters.VacuumTimeClosed);
	T_BlowOffClosed(IN:= , PT:= MachParameters.BlowOffTimeClosed);	
	RT_StartBlowOffClosed(CLK:= MachParameters.EnableClosedBlowOff AND (miCycleState = 4));
	RT_StartVacuumClosed(CLK:=MachParameters.EnableClosedVacuum AND (miCycleState = 4));
	
	IF RT_StartBlowOffClosed.Q THEN 
		T_BlowOffClosed.IN := TRUE;
		BlowOff.M_On();
	ELSIF RT_StartVacuumClosed.Q THEN
		T_VacuumTimeClosed.IN := TRUE;
		Vacuum.M_On();
	END_IF
	
	IF T_BlowOffClosed.Q THEN 
		T_BlowOffClosed.IN := FALSE;
		BlowOff.M_Off(); 
	END_IF
	IF T_VacuumTimeClosed.Q THEN 
		T_VacuumTimeClosed.IN := FALSE;
		Vacuum.M_Off(); 
	END_IF
	
	RT_StartVacuumdEndDrying(CLK:=SgElapsedDryingTime > (SgTotalDryingTime - MachParameters.VacuumTimeEndDrying));
	IF RT_StartVacuumdEndDrying.Q THEN
		Vacuum.M_On();
	END_IF

{endregion}

{region "copy parameter set for pause position movement"}
	 MachParameters.PausePositionUpSlow := MachParameters.PositionUpSlow;	
	 MachParameters.PausePositionUpCreep := MachParameters.PositionUpCreep;	
{endregion}

(*Cycle State's*)
CASE miCycleState OF
	
	0:  // (P)  Wait for start
		IF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF mxStartCycle THEN
			mxStartCycle:= FALSE;
			miCycleState:= 1;
		END_IF
	
	1:  // (P)  wait for move down
		HydraulicCilinder.M_Move(EndPosition:= MachParameters.PositionUpStop,  NormalSpeed:= MachParameters.SpeedUpNormal, 		// Keep topmold in its "up" position.
								SlowPosition:= MachParameters.PositionUpStop - MachParameters.PositionUpSlow, SlowSpeed:= MachParameters.SpeedUpSlow, 
								CreepPosition:=MachParameters.PositionUpStop - MachParameters.PositionUpCreep, CreepSpeed:=MachParameters.SpeedUpCreep);


		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF mxStopCycle AND mxEmptyMachine THEN
			mxStopCycle:=False;
			mxEmptyMachine:= FALSE;
			HydraulicCilinder.M_Stop();
			miCycleState:= 0;
		ELSIF mxStopCycle THEN
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF sgMoveDown THEN
			T_SingleKO.IN:= FALSE;
			DryingSingleKO := TIME_TO_REAL(T_SingleKO.ET);
			sgTopmoldBlowOffReady := FALSE;
			sgMoveDown:= FALSE;
			mxMoveUp:= FALSE;
			SgTmIsUp:= FALSE;
			miCycleState:= 2;
		END_IF
	
	2:  // (NP) Move down. 
		T_TmNotOnBmPosTimeOut.IN:=TRUE;
		T_SingleKO.IN:= TRUE;
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;(*Stop direct*)
		ELSIF MachParameters.UseNormalSpeedProfile AND NOT sgSample THEN
			IF HydraulicCilinder.M_Move(EndPosition:=ProdParameters.PositionDownStop, NormalSpeed:=MachParameters.SpeedDownNormal, 
										SlowPosition:=ProdParameters.PositionDownStop + Machparameters.PositionDownSlow, SlowSpeed:=MachParameters.SpeedDownNormal, 
										CreepPosition:=ProdParameters.PositionDownStop + Machparameters.PositionDownCreep, CreepSpeed:=MachParameters.SpeedDownNormal) OR T_TmNotOnBmPosTimeOut.Q THEN
			T_TmNotOnBmPosTimeOut.IN:=FALSE;
			sgSample := FALSE;
			miCycleState:= 3;
			END_IF
		ELSE											// go down with slow creep profile settings (also fist time after pause)
			IF HydraulicCilinder.M_Move(EndPosition:=ProdParameters.PositionDownStop, NormalSpeed:=MachParameters.SpeedDownNormal, 
										SlowPosition:=ProdParameters.PositionDownStop + Machparameters.PositionDownSlow, SlowSpeed:=MachParameters.SpeedDownSlow, 
										CreepPosition:=ProdParameters.PositionDownStop + Machparameters.PositionDownCreep, CreepSpeed:=MachParameters.SpeedDownCreep) OR T_TmNotOnBmPosTimeOut.Q THEN
			T_TmNotOnBmPosTimeOut.IN:=FALSE;
			sgSample := FALSE;
			miCycleState:= 3;
			END_IF
		END_IF
	
	3:  // (NP) Select HMI dryingtime
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;(*Stop direct*)
		ELSIF TRUE  THEN
			Dryingtime := MachParameters.DryingTime;
			sgTmIsDown:= TRUE;
			sgTmIsUp:=FALSE;
			miCycleState:= 4;
		END_IF
	
	
	4:  // (P) start drying 
		T_DryingTime.IN:=TRUE;
		HydraulicCilinder.M_Press(Pressdown:=TRUE, PressSpeed:=MachParameters.PressSpeed, StoppingPressure:=MachParameters.PressStop);
		
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;(*Stop direct*)
		ELSIF mxStopCycle THEN	
			DryingElapsedTime := T_DryingTime.ET;
			T_DryingTime.IN := FALSE;
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF T_DryingTime.Q THEN		// When dryingtime has finished, allways open up
			T_DryingTime.IN:= FALSE;
			Vacuum.M_On();
			miCycleState:= 5;
		END_IF
		
	5:  // (NP) Move up to "open" position with "slow" speed 
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		//ELSIF HydraulicCilinder.M_Move(EndPosition:= ProdParameters.PositionDownOpen,  NormalSpeed:=MachParameters.SpeedOpening, 
		//								SlowPosition:= ProdParameters.PositionDownOpen, SlowSpeed:=MachParameters.SpeedOpening, 
		//								CreepPosition:=ProdParameters.PositionDownOpen, CreepSpeed:=MachParameters.SpeedOpening) THEN
		ELSIF TRUE THEN	
			miCycleState:= 6;
		END_IF
	
		
	6:  // (NP) Move up with product
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF HydraulicCilinder.M_OpenAndMove(EndPosition:= MachParameters.PositionUpStop,  NormalSpeed:= MachParameters.SpeedUpNormal, 
										SlowPosition:= MachParameters.PositionUpStop - MachParameters.PositionUpSlow, SlowSpeed:= MachParameters.SpeedUpSlow, 
										CreepPosition:=MachParameters.PositionUpStop - MachParameters.PositionUpCreep, CreepSpeed:=MachParameters.SpeedUpCreep,
										OpenPosition:= ProdParameters.PositionDownOpen,  OpenSpeed:=MachParameters.SpeedOpening) THEN
			SgTmIsUp:= TRUE;
			SgTmIsDown:= FALSE;
			mxMoveUp:= FALSE;
			miCycleState:= 7;
		END_IF
		
	7:  // (P) Wait until takeout is moving up
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;(*Stop direct*)	
		ELSIF mxStopCycle THEN	
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			miCycleState:= 20;
		ELSIF mxTakeOutIsMovingUp AND 
			HydraulicCilinder.M_Move(EndPosition:= MachParameters.PositionUpStop,  NormalSpeed:= MachParameters.SpeedUpNormal, 		// Keep topmold in its "up" position.
				SlowPosition:= MachParameters.PositionUpStop - MachParameters.PositionUpSlow, SlowSpeed:= MachParameters.SpeedUpSlow, 
				CreepPosition:=MachParameters.PositionUpStop - MachParameters.PositionUpCreep, CreepSpeed:=MachParameters.SpeedUpCreep) THEN
			Vacuum.M_Off();
			BlowOff.M_On();
			miCycleState:= 8;
		END_IF
		
	8:  // (P) Await Blowoff -> NP to P -> BaTeu 20190408 
		T_BlowOff.IN := TRUE;		
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;(*Stop direct*)
		ELSIF mxStopCycle THEN	
			mxStopCycle:= FALSE;
			miStopState:= miCycleState;
			BlowOff.M_Off();
			miCycleState:= 20;
		ELSIF T_BlowOff.Q THEN			
			sgTopmoldBlowOffReady := TRUE;
			
			IF sgTakeOutUnitDown THEN
				BlowOff.M_Off();		
				T_BlowOff.IN := FALSE;
					
				miCycleState:= 1;
			END_IF
		END_IF
		
	20: //(NP) Pause step, stop all movement
		T_PauseDelayedUp.IN := TRUE;
		T_SingleKO.IN:= FALSE;
		DryingSingleKO := TIME_TO_REAL(T_SingleKO.ET);
		
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;	
			miCycleState:= 25;
		ELSIF T_PauseDelayedUp.Q AND HydraulicCilinder.M_Stop() THEN		
			miCycleState:= 21;
		END_IF

	21: //(NP) Move up to pause position 
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF HydraulicCilinder.M_Move(EndPosition:=MachParameters.PausePositionUp, NormalSpeed:= MachParameters.SpeedUpSlow, 
											SlowPosition:=MachParameters.PausePositionUp - MachParameters.PausePositionUpSlow, SlowSpeed:=MachParameters.SpeedUpSlow,
											CreepPosition:=MachParameters.PausePositionUp - MachParameters.PausePositionUpCreep, CreepSpeed:=MachParameters.SpeedUpCreep) THEN
											
			HydraulicCilinder.M_Stop();
			miCycleState := 22;
		END_IF
		
	22: //(Paused) Await restart.
		IF mxStopDirect THEN
			mxStopDirect:= FALSE;
			miCycleState:= 25;
		ELSIF mxStartCycle THEN
			IF miStopState = 8 THEN	// if comming from state 8, restart blowoff.
				BlowOff.M_On();
			END_IF	
		
			IF miStopState = 4 THEN	// Re-calculate the remaining drying time and move down to drying pos.
				DryingTime := MachParameters.DryingTime - DryingElapsedTime;
					IF HydraulicCilinder.M_Move(EndPosition:=ProdParameters.PositionDownStop, NormalSpeed:=MachParameters.SpeedDownNormal, 		// Go down with slow creep profile
										SlowPosition:=ProdParameters.PositionDownStop + Machparameters.PositionDownSlow, SlowSpeed:=MachParameters.SpeedDownSlow, 
										CreepPosition:=ProdParameters.PositionDownStop + Machparameters.PositionDownCreep, CreepSpeed:=MachParameters.SpeedDownCreep) THEN
					mxStartCycle:= FALSE;
					miCycleState:= miStopState;
					END_IF
			ELSE					// Move to normal "up" position, and resume normal steps.
				IF HydraulicCilinder.M_Move(EndPosition:= MachParameters.PositionUpStop,  NormalSpeed:= MachParameters.SpeedUpSlow, 		
								SlowPosition:= MachParameters.PositionUpStop - MachParameters.PositionUpSlow, SlowSpeed:= MachParameters.SpeedUpSlow, 
								CreepPosition:=MachParameters.PositionUpStop - MachParameters.PositionUpCreep, CreepSpeed:=MachParameters.SpeedUpCreep) THEN	
					mxStartCycle:= FALSE;
					miCycleState:= miStopState;
				END_IF
			END_IF
		END_IF
		
	25: // Stop direct
		mxStartCycle:= FALSE;
		mxStopCycle:= FALSE;
		mxInitialized:= FALSE;

		T_DryingTime.IN:= FALSE;
		
		HydraulicCilinder.M_StopDirect();
		Vacuum.M_Off(); (* When product do not switch off *)
		BlowOff.M_Off();
		
		T_SingleKO.IN:= FALSE;
		DryingSingleKO := TIME_TO_REAL(T_SingleKO.ET);
		sgTopmoldBlowOffReady := FALSE;
		T_TmNotOnBmPosTimeOut.IN:=FALSE;		
		
		miCycleState:= 0;

END_CASE

mxCycleBusy:= miCycleState<>0 AND NOT (miCycleState=22);
mxInPause:=miCycleState=22;

IF (DryingSingleKO - TopLateTime) > 0 THEN
	MaxDryingSingleKO := (60000/(DryingSingleKO - TopLateTime));
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Error" Id="{66da3a34-a24d-40b5-a841-1ea942d4ab90}">
      <Implementation>
        <ST><![CDATA[SR_TmDidNotReachBmPos(SET1:=T_TmNotOnBmPosTimeOut.Q, RESET:= mxReset, Q1=>Errors.TmDidNotReachBmPosTimeOut);


(* ****************************************************************************** *)
mxErrorStopInPos:= Errors.TmDidNotReachBmPosTimeOut;
mxErrorInit:= HydraulicCilinder.mxErrorInit
			OR HeatingZone[1].mxErrorInit
			OR HeatingZone[2].mxErrorInit
			OR HeatingZone[3].mxErrorInit
			OR HeatingZone[4].mxErrorInit
			OR HeatingZone[5].mxErrorInit
			OR HEatingZone[6].mxErrorInit;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Init" Id="{f7aba8dc-4755-4b83-9e5d-3eeacad8d9cb}">
      <Implementation>
        <ST><![CDATA[(*StateChange (Transition)  Signalgeneration*)
mxInitTransitionState:=(miInitState<>miInitOldstate);
(*State text*)
sInitStateText:=sInitStateTextDef[miInitState];
(*Timeout Watchdog for Statemachine*)
mxInitTimeoutEnable:=NOT (miInitState=0)  AND NOT mxReset;

InitTimeout(IN:=mxInitTimeoutEnable  , PT:=tInitStateTimeouts[miInitState] );
InitTimeOutUpFlank(CLK:=InitTimeout.Q );
miInitOldstate:=miInitState;

(*Set Errorbit when Raising edge of Timeout has been detected*)
IF InitTimeOutUpFlank.Q THEN
	exInitTimeOut:=TRUE; 			(* 1 Timeout for the whole programcycle *)
END_IF

(*Function to reset the Statemachine*)
IF mxResetInitState THEN
	mxResetInitState:=FALSE;
	miInitState:=0;
	miInitOldstate:=miInitState;
	mxInitTransitionState:=FALSE;
	
	mxStartInit:= FALSE;
	mxStopInit:= FALSE;		
END_IF

(*Definition State has Error*)
mxInitHasError:=FALSE;

(*Init State's*)
CASE miInitState OF
	0:
		IF mxStartInit THEN
			mxStartInit:= FALSE;
			mxInitialized:=FALSE;
			
			Vacuum.M_Off();
			BlowOff.M_Off();

			miInitState:= 1;
		END_IF
		
	(* Move Up *)	
	1:
		IF mxStopInit THEN
			mxStopInit:= FALSE;

			miInitState:= 10;
		END_IF
			
		// Above Normal Position
		IF HydraulicCilinder.ActPosition > MachParameters.PositionUpStop THEN // Move down
			IF HydraulicCilinder.M_Move(EndPosition:=MachParameters.PositionUpStop, NormalSpeed:= MachParameters.InitSpeedDownNormal, 
											SlowPosition:=MachParameters.PositionUpStop + MachParameters.PositionUpSlow, SlowSpeed:=MachParameters.InitSpeeddownSlow, 
											CreepPosition:=MachParameters.PositionUpStop + MachParameters.PositionUpCreep,	CreepSpeed:=MachParameters.InitSpeedDownCreep ) THEN
			mxInitialized:= TRUE; (* Return val *)
			miInitState:= 0;	
			END_IF
		ELSE
		// Below normal position
			IF HydraulicCilinder.M_Move(EndPosition:=MachParameters.PositionUpStop, NormalSpeed:= MachParameters.InitSpeedUpNormal, 
											SlowPosition:=MachParameters.PositionUpStop - MachParameters.PositionUpSlow, SlowSpeed:=MachParameters.InitSpeedUpSlow, 
											CreepPosition:=MachParameters.PositionUpStop - MachParameters.PositionUpCreep,	CreepSpeed:=MachParameters.InitSpeedUpCreep ) THEN
			mxInitialized:= TRUE; (* Return val *)
			miInitState:= 0;	
			END_IF
		END_IF

	(* Stop Init *)
	10:
		HydraulicCilinder.M_Stop();

		mxStartInit:= FALSE;
		mxStopInit:= FALSE;
		mxInitialized:=FALSE;					

		miInitState:= 0;
END_CASE

mxInitBusy:= miInitState<>0;]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_EmptyMachine" Id="{427defab-33ee-46e3-b86c-26c43217307b}">
      <Declaration><![CDATA[METHOD M_EmptyMachine
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxEmptyMachine:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartCycle" Id="{60f5d12b-dd25-4393-b3b3-a2162a925419}">
      <Declaration><![CDATA[METHOD M_StartCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxCycleBusy THEN
	mxStartCycle:= TRUE;	
	mxStopCycle := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StartInit" Id="{1e7dd9cb-2b74-4360-92d5-d40cba4e6f74}">
      <Declaration><![CDATA[METHOD M_StartInit
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT mxInitBusy THEN 
	mxStartInit:= TRUE; 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopCycle" Id="{6b0e6f3c-2f7c-4e9c-b362-79a28a7b070e}">
      <Declaration><![CDATA[METHOD M_StopCycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mxStopCycle:= TRUE; 

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopDirect" Id="{bb973ae9-b5f9-4eab-86c6-e4763c6aa73e}">
      <Declaration><![CDATA[METHOD M_StopDirect
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxCycleBusy THEN
	mxStopDirect:= TRUE;	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StopInit" Id="{39a3f404-e2be-408d-b953-4425c44cc67f}">
      <Declaration><![CDATA[METHOD M_StopInit
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF mxInitBusy THEN 
	mxStopInit:= TRUE; 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Action Name="Objects" Id="{f4c6d122-9031-434d-b21e-1f3c62e81905}">
      <Implementation>
        <ST><![CDATA[(* Object Calls *)
HydraulicCilinder(
	mxReset:= mxReset, 
	mxEmergency:= mxEmergency OR mxDoorsOpened, 
	mxAutoMode:= mxAutoMode, 
	EndPositionIn:= MachParameters.PositionUpStop,
	EndPositionOut:= ProdParameters.PositionDownStop,
	OffsetPosition:= MachParameters.PositionOffsetZero,
	OffsetAlarmPosition:= MachParameters.PositionOffsetAlarm,
	PositionPhysicalMeasured:=MachParameters.PositionPhyscialMeasured,
	PositionPhysicalMeasuredOld:=MachParameters.PositionPhysicalMeasuredOld,
	PhysicalOffsetPos:=MachParameters.PhysicalOffsetPos,
	RHSR_Blocked:=RHSR_Blocked,
	mxCycleBusy:=mxCycleBusy,
	mxInitBusy:=mxInitBusy,
	mxIsMovingIn=> mxCilIsMovingIn, 
	mxIsMovingOut=> mxCilIsMovingOut, 
	ManSpeedCreepIn:=MachParameters.ManSpeedCreep,
	ManSpeedCreepOut:=MachParameters.ManSpeedCreep,
	ManSpeedSlowIn:=MachParameters.ManSpeedSlow,
	ManSpeedSlowOut:=MachParameters.ManSpeedSlow,
	ManSpeedIn:=MachParameters.ManSpeed,
	ManSpeedOut:=MachParameters.ManSpeed,
	mxIsIn=> mxCilIsIn, 
	mxIsOut=> mxCilIsOut,
	Errors=> Errors.Hydraulic);
	
Vacuum(
	mxReset:= mxReset, 
	mxEmergency:= mxEmergency OR mxDoorsOpened, 
	mxAutoMode:= mxAutoMode);
	
BlowOff(
	mxReset:= mxReset, 
	mxEmergency:= mxEmergency OR mxDoorsOpened, 
	mxAutoMode:= mxAutoMode);


HeatingZone[1](
	mxReset:= mxReset,
	mxEmergency:=mxEmergency OR mxDoorsOpened,
	mxDoorsOpened:=FALSE,
	mxEnableHeating:=mxEnableHeating,
	MachParameters:=MachParameters.HeatingZone[1],
	Errors=> Errors.HeatingZone[1]);	
	
HeatingZone[2](
	mxReset:= mxReset,
	mxEmergency:=mxEmergency OR mxDoorsOpened,
	mxDoorsOpened:=FALSE,
	mxEnableHeating:=mxEnableHeating,
	MachParameters:=MachParameters.HeatingZone[2],
	Errors=> Errors.HeatingZone[2]);

HeatingZone[3](
	mxReset:= mxReset,
	mxEmergency:=mxEmergency OR mxDoorsOpened,
	mxDoorsOpened:=FALSE,
	mxEnableHeating:=mxEnableHeating,
	MachParameters:=MachParameters.HeatingZone[3],
	Errors=> Errors.HeatingZone[3]);

HeatingZone[4](
	mxReset:= mxReset,
	mxEmergency:=mxEmergency OR mxDoorsOpened,
	mxDoorsOpened:=FALSE,
	mxEnableHeating:=mxEnableHeating,
	MachParameters:=MachParameters.HeatingZone[4],
	Errors=> Errors.HeatingZone[4]);

HeatingZone[5](
	mxReset:= mxReset,
	mxEmergency:=mxEmergency OR mxDoorsOpened,
	mxDoorsOpened:=FALSE,
	mxEnableHeating:=mxEnableHeating,
	MachParameters:=MachParameters.HeatingZone[5],
	Errors=> Errors.HeatingZone[5]);

HeatingZone[6](
	mxReset:= mxReset,
	mxEmergency:=mxEmergency OR mxDoorsOpened,
	mxDoorsOpened:=FALSE,
	mxEnableHeating:=mxEnableHeating,
	MachParameters:=MachParameters.HeatingZone[6],
	Errors=> Errors.HeatingZone[6]);]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_TopMold">
      <LineId Id="330" Count="3" />
      <LineId Id="470" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="614" Count="1" />
      <LineId Id="618" Count="1" />
      <LineId Id="621" Count="5" />
      <LineId Id="620" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.Cycle">
      <LineId Id="1513" Count="54" />
      <LineId Id="1911" Count="0" />
      <LineId Id="1568" Count="21" />
      <LineId Id="1813" Count="1" />
      <LineId Id="1818" Count="0" />
      <LineId Id="1820" Count="2" />
      <LineId Id="1590" Count="53" />
      <LineId Id="1878" Count="0" />
      <LineId Id="1882" Count="0" />
      <LineId Id="1884" Count="2" />
      <LineId Id="1917" Count="0" />
      <LineId Id="1896" Count="0" />
      <LineId Id="1898" Count="0" />
      <LineId Id="1889" Count="4" />
      <LineId Id="1916" Count="0" />
      <LineId Id="1897" Count="0" />
      <LineId Id="1899" Count="0" />
      <LineId Id="1895" Count="0" />
      <LineId Id="1651" Count="58" />
      <LineId Id="1839" Count="0" />
      <LineId Id="1711" Count="1" />
      <LineId Id="1833" Count="0" />
      <LineId Id="1836" Count="2" />
      <LineId Id="1713" Count="13" />
      <LineId Id="1900" Count="0" />
      <LineId Id="1902" Count="1" />
      <LineId Id="1905" Count="0" />
      <LineId Id="1904" Count="0" />
      <LineId Id="1727" Count="0" />
      <LineId Id="1731" Count="0" />
      <LineId Id="1831" Count="0" />
      <LineId Id="1825" Count="1" />
      <LineId Id="1828" Count="2" />
      <LineId Id="1827" Count="0" />
      <LineId Id="1733" Count="30" />
      <LineId Id="1910" Count="0" />
      <LineId Id="1908" Count="1" />
      <LineId Id="1907" Count="0" />
      <LineId Id="1766" Count="1" />
      <LineId Id="1851" Count="0" />
      <LineId Id="1857" Count="4" />
      <LineId Id="1774" Count="35" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.Error">
      <LineId Id="18" Count="11" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.Init">
      <LineId Id="60" Count="0" />
      <LineId Id="33" Count="19" />
      <LineId Id="204" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="53" Count="4" />
      <LineId Id="84" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="165" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="227" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="211" Count="6" />
      <LineId Id="228" Count="0" />
      <LineId Id="218" Count="5" />
      <LineId Id="226" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.M_EmptyMachine">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.M_StartCycle">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.M_StartInit">
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.M_StopCycle">
      <LineId Id="11" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.M_StopDirect">
      <LineId Id="56" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.M_StopInit">
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TopMold.Objects">
      <LineId Id="2" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="131" Count="5" />
      <LineId Id="105" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="43" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="46" Count="2" />
      <LineId Id="55" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>