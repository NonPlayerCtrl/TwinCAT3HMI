<div id="Kremer_Button" data-tchmi-type="tchmi-user-control" 
     data-tchmi-top="0" data-tchmi-left="0" 
     data-tchmi-width="100" data-tchmi-height="100" data-tchmi-width-unit="%" data-tchmi-height-unit="%"
     data-tchmi-creator-viewport-width="500" data-tchmi-creator-viewport-height="500" data-tchmi-visibility="%f%ConvertBooleanToVisibility(%pp%Visible%/pp%, &quot;Collapsed&quot;);%/f%">

<div id="TcHmiButton_34" data-tchmi-type="tchmi-button" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0.0" data-tchmi-left-unit="%" data-tchmi-text="%pp%Value%/pp%" data-tchmi-top="0.0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-word-wrap="True" data-tchmi-text-font-family="%f%if(%pp%FontFamily%/pp% != &quot;&quot;) { %pp%FontFamily%/pp% } else {}%/f%" data-tchmi-text-font-size="%f%if(%pp%FontSize%/pp% != 0){ %pp%FontSize%/pp% } else {}%/f%">




<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_34.onStatePressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "expressions": [
          {
            "compare1": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ButtonType%/pp%"
            },
            "compare2": {
              "objectType": "StaticValue",
              "valueType": "tchmi:project#/definitions/ButtonType",
              "value": "Continuous"
            },
            "compareOperator": "==",
            "logic": null
          }
        ],
        "true": [
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%pp%BindingSymbol%/pp%",
            "valueType": "tchmi:general#/definitions/BOOL",
            "value": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/BOOL",
              "value": true
            },
            "asyncWait": true
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_34.onStateReleased",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "expressions": [
          {
            "compare1": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ButtonType%/pp%"
            },
            "compare2": {
              "objectType": "StaticValue",
              "valueType": "tchmi:project#/definitions/ButtonType",
              "value": "Continuous"
            },
            "compareOperator": "==",
            "logic": null
          }
        ],
        "true": [
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%pp%BindingSymbol%/pp%",
            "valueType": "tchmi:general#/definitions/BOOL",
            "value": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/BOOL",
              "value": false
            },
            "asyncWait": true
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_34.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var button = new TcHmi.Symbol('%pp%ButtonType%/pp%');\nvar Type = button.read();\nvar symbol = new TcHmi.Symbol('%pp%BindingSymbol%/pp%');\nvar symbolValue = symbol.read();\nif(Type == \"Set\"){\n\tsymbol.write(true);\n} else if (Type == \"Reset\") {\n\tsymbol.write(false);\n} else if (Type == \"Toggle\"){\n\tif(symbolValue == true){\n\t\tsymbol.write(false);\t\n \t} else {\n\t\tsymbol.write(true);\n\t}\n}"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ],
    "displayName": ""
  },
  {
    "event": "%pp%BindingStateSymbol%/pp%",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "expressions": [
          {
            "compare1": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%BindingStateSymbol%/pp%"
            },
            "compare2": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/BOOL",
              "value": true
            },
            "compareOperator": "==",
            "logic": null
          }
        ],
        "true": [
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiButton_34::BackgroundColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%BackcolorOn%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiButton_34::TextColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/SolidColor",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%TextcolorOn%/pp%"
            },
            "asyncWait": true
          }
        ],
        "false": [
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiButton_34::BackgroundColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%BackcolorOff%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiButton_34::TextColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/SolidColor",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%TextcolorOff%/pp%"
            },
            "asyncWait": true
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_34.onAttached",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%pp%ThisControl%/pp%",
        "valueType": "tchmi:framework#/definitions/Control",
        "value": {
          "objectType": "Symbol",
          "valueType": "tchmi:framework#/definitions/Control",
          "symbolExpression": "%ctrl%Kremer_Button%/ctrl%"
        },
        "asyncWait": true
      },
      {
        "objectType": "Comment",
        "comment": "Create appropriate bindings"
      },
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var paramsTemp = \"\";\n\nvar pageParamSymbol = new TcHmi.Symbol('%i%_pageParameters%/i%');\nvar pageParamsSymbolValue = pageParamSymbol.read();\n\nvar paramSymbol = new TcHmi.Symbol('%pp%Parameters%/pp%');\nvar paramSymbolValue = paramSymbol.read();\n\nif(paramSymbolValue){\n\tparamsTemp = paramSymbolValue;\t\n} else if(pageParamsSymbolValue){\n    paramsTemp = pageParamsSymbolValue;\n}\n\nvar targetControl = new TcHmi.Symbol('%pp%ThisControl%/pp%');\nvar controlValue = targetControl.read();\nvar control = controlValue.__parent;\nvar ControlgetSymbol = control.getSymbol();\nvar hasSymbol = ControlgetSymbol.__symbol !== undefined ? true : false;\n\nvar stateSymbol = new TcHmi.Symbol(\"%pp%StateSymbol%/pp%\");\nvar stateSymbolValue = stateSymbol.read();\nvar hasStateSymbol = stateSymbolValue.__symbol !== undefined ? true : false;\n\nvar placeholderSymbol = new TcHmi.Symbol('%pp%SymbolWithPlaceholder%/pp%');\nvar placeholderValue = placeholderSymbol.read();\n\t\nvar value = \"\";\nvar stateValue = \"\";\n\nvar write = false;\n\nif(placeholderValue && !hasSymbol) {\n\t// Convert the string with placeholders to the symbol string\n\t// bind the new symbol to the Symbol parameter to be able to update it throught the HMI\n\t// and afterwards set the Value parameter binding aswell\n\t\n\t//console.log(paramsTemp);\n\t\n\t//console.log(placeholderValue);\n\tparamsTemp = paramsTemp.replace(/ /g, \"\");\n\tvar params = paramsTemp.split(',');\n\tvar tempValue = '%s%';\n\ttempValue += placeholderValue;\n\tfor(var i = 0; i < params.length; i++){\n\t\tif(params[i].startsWith(\"%\")){\n\t\t\tvar tempSymbol = new TcHmi.Symbol(params[i]);\n\t\t\tvar tempSymbolValue = tempSymbol.read();\n\t\t\tparams[i] = tempSymbolValue;\n\t\t}\n\t\ttempValue = tempValue.replace(\"{\" + i + \"}\", params[i]);\n\t}\n\ttempValue += '%/s%';\n\t//var tempValue = TcHmi.Functions.Beckhoff.FormatString(SymbolValue, params);\n\tvalue = tempValue;\n\t\n\tTcHmi.Binding.createEx(value, 'setSymbol', control);\n\t\n\t// Create binding for the StateSymbol if needed\n\tvar placeholderStateSymbol = new TcHmi.Symbol('%pp%StateSymbolWithPlaceholder%/pp%');\n\tvar placeholderStateValue = placeholderStateSymbol.read();\n\tif(placeholderStateValue){\n\t\tvar tempStateValue = \"%s%\";\n\t\ttempStateValue += placeholderStateValue;\n\t\tfor(var i = 0; i < params.length; i++){\n\t\t\tif(params[i].startsWith(\"%\")){\n\t\t\t\tvar tempStateSymbol = new TcHmi.Symbol(params[i]);\n\t\t\t\tvar tempStateSymbolValue = tempStateSymbol.read();\n\t\t\t\tparams[i] = tempStateSymbolValue;\n\t\t\t}\n\t\t\ttempStateValue = tempStateValue.replace(\"{\" + i + \"}\", params[i]);\n\t\t}\n\t\ttempStateValue += '%/s%';\n\t\tstateValue = tempStateValue;\n\t} else {\n\t\tstateValue = value;\n\t}\n\t\n\t\n\t//cleanup\n\tplaceholderSymbol.destroy();\n\tplaceholderSymbol = null;\n\tplaceholderStateSymbol.destroy();\n\tplaceholderStateSymbol = null;\n\t\n\twrite = true;\n\t\n} else if(hasSymbol){\n\t// Create binding for the Value parameter, so it will monitor the value in the PLC\n\t\n\tvar Symbol = new TcHmi.Symbol('%pp%Symbol%/pp%');\n\tvar SymbolValue = Symbol.read();\n\t//console.log(SymbolValue);\n\tvalue = SymbolValue.__symbol.__expression.__expression;\n\t\n\t//cleanup\n\tSymbol.destroy();\n\tSymbol = null;\n\t\n\tif(hasStateSymbol){\n\t\tstateValue = stateSymbolValue.__symbol.__expression.__expression;\n\t} else {\n\t\tstateValue = value;\t\n\t}\n\t\n\twrite = true;\n} else {\n\t//No Symbol or SymbolWithPlaceholders was set so not doing anything\t\n}\n\nif(control && write){\n\t//console.log(\"Value\");\n\t//console.log(value);\n\tTcHmi.Binding.createEx(value, 'setBindingSymbol', control);\n}\n\nif(stateValue !== \"\" && write){\n\t//console.log(\"State Value\");\n\t//console.log(stateValue);\n\tTcHmi.Binding.createEx(stateValue, 'setBindingStateSymbol', control);\t\n}\n\n//cleanup\nparamSymbol.destroy();\nparamSymbol = null;\ntargetControl.destroy();\ntargetControl = null;\nstateSymbol.destroy();\nstateSymbol = null;"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>



<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>











<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(193, 193, 193, 1)"
}
</script>
</div>

</div>