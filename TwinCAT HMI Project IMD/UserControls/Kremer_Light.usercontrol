<div id="Kremer_Light" data-tchmi-type="tchmi-user-control" 
     data-tchmi-top="0" data-tchmi-left="0" 
     data-tchmi-width="100" data-tchmi-height="100" data-tchmi-width-unit="%" data-tchmi-height-unit="%"
     data-tchmi-creator-viewport-width="500" data-tchmi-creator-viewport-height="500" data-tchmi-visibility="%f%ConvertBooleanToVisibility(%pp%Visible%/pp%, &quot;Collapsed&quot;)%/f%">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%pp%BindingSymbol%/pp%",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "expressions": [
          {
            "compare1": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%BindingSymbol%/pp%"
            },
            "compare2": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/BOOL",
              "value": true
            },
            "compareOperator": "==",
            "logic": null
          }
        ],
        "true": [
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiEllipse_Ellipse::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOn%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Square::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOn%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Left::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOn%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Right::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOn%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Top::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOn%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Bot::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOn%/pp%"
            },
            "asyncWait": true
          }
        ],
        "false": [
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiEllipse_Ellipse::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOff%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Square::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOff%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Left::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOff%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Right::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOff%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Top::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOff%/pp%"
            },
            "asyncWait": true
          },
          {
            "objectType": "WriteToSymbol",
            "active": true,
            "symbolExpression": "%ctrl%TcHmiPolygon_Arrow_Bot::FillColor%/ctrl%",
            "valueType": "tchmi:framework#/definitions/Color",
            "value": {
              "objectType": "Symbol",
              "symbolExpression": "%pp%ColorOff%/pp%"
            },
            "asyncWait": true
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "Kremer_Light.onAttached",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%pp%ThisControl%/pp%",
        "valueType": "tchmi:framework#/definitions/Control",
        "value": {
          "objectType": "Symbol",
          "valueType": "tchmi:framework#/definitions/Control",
          "symbolExpression": "%ctrl%Kremer_Light%/ctrl%"
        },
        "asyncWait": true
      },
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var paramsTemp = \"\";\n\nvar pageParamSymbol = new TcHmi.Symbol('%i%_pageParameters%/i%');\nvar pageParamsSymbolValue = pageParamSymbol.read();\n\nvar paramSymbol = new TcHmi.Symbol('%pp%Parameters%/pp%');\nvar paramSymbolValue = paramSymbol.read();\n\nif(paramSymbolValue){\n\tparamsTemp = paramSymbolValue;\t\n} else if(pageParamsSymbolValue){\n    paramsTemp = pageParamsSymbolValue;\n}\n\nvar placeholderSymbol = new TcHmi.Symbol('%pp%SymbolWithPlaceholder%/pp%');\nvar placeholderValue = placeholderSymbol.read();\n\nvar targetControl = new TcHmi.Symbol('%pp%ThisControl%/pp%');\nvar controlValue = targetControl.read();\nvar control = controlValue.__parent;\nvar ControlgetSymbol = control.getSymbol();\nvar hasSymbol = ControlgetSymbol.__symbol !== undefined ? true : false;\n\nvar value = \"\";\n\nvar write = false;\n\nif(placeholderValue && !hasSymbol) {\n\t// Convert the string with placeholders to the symbol string\n\t// bind the new symbol to the Symbol parameter to be able to update it throught the HMI\n\t// and afterwards set the Value parameter binding aswell\n\t\n\tparamsTemp = paramsTemp.replace(/ /g, \"\");\n    var params = paramsTemp.split(',');\n\tvar tempValue = '%s%';\n\ttempValue += placeholderValue;\n\tfor(var i = 0; i < params.length; i++){\n\t\tif(params[i].startsWith(\"%\")){\n\t\t\tvar tempSymbol = new TcHmi.Symbol(params[i]);\n\t\t\tvar tempSymbolValue = tempSymbol.read();\n\t\t\tparams[i] = tempSymbolValue;\n\t\t}\n\t\ttempValue = tempValue.replace(\"{\" + i + \"}\", params[i]);\n\t}\n\ttempValue += '%/s%';\n\t//var tempValue = TcHmi.Functions.Beckhoff.FormatString(SymbolValue, params);\n\tvalue = tempValue;\n\twrite = true;\n\t\n} else if(hasSymbol){\n\tvar Symbol = new TcHmi.Symbol('%pp%Symbol%/pp%');\n\tvar SymbolValue = Symbol.read();\n\t//console.log(SymbolValue);\n\tvalue = SymbolValue.__symbol.__expression.__expression;\n\t\n\t//cleanup\n\tSymbol.destroy();\n\tSymbol = null;\n\t\n\twrite = true;\n}\n\nif(control && write){\n\tTcHmi.Binding.createEx(value, 'setBindingSymbol', control);\t\t\n}\n\n//cleanup\npageParamSymbol.destroy();\npageParamSymbol = null;\nparamSymbol.destroy();\nparamSymbol = null;\ntargetControl.destroy();\ntargetControl = null;\nplaceholderSymbol.destroy();\nplaceholderSymbol = null;\n"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
<div id="TcHmiEllipse_Ellipse" data-tchmi-type="tchmi-ellipse" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-stroke-thickness="0.75" data-tchmi-top="0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-visibility="%f%if(%pp%Shape%/pp% == &quot;Ellipse&quot;) {&quot;Visible&quot;} else {&quot;Collapsed&quot;};%/f%" data-tchmi-zindex="1" data-tchmi-fill-color="%pp%ColorOff%/pp%">

<script data-tchmi-target-attribute="data-tchmi-stroke-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "None"
}
</script>
</div>

<div id="TcHmiPolygon_Square" data-tchmi-type="tchmi-polygon" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-points="0, 0 200, 0 200, 200 0, 200 0, 0" data-tchmi-scale-mode="ScaleToFill" data-tchmi-stroke-thickness="0.75" data-tchmi-top="0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-visibility="%f%if(%pp%Shape%/pp% == &quot;Rectangle&quot;){&quot;Visible&quot;} else {&quot;Collapsed&quot;};%/f%" data-tchmi-fill-color="%pp%ColorOff%/pp%">
<script data-tchmi-target-attribute="data-tchmi-stroke-color" type="application/json">
{
  "color": "Black"
}
</script>




<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "None"
}
</script>
</div>

<div id="TcHmiPolygon_Arrow_Left" data-tchmi-type="tchmi-polygon" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-points="100,0 100,100 0,50" data-tchmi-scale-mode="ScaleToFill" data-tchmi-stroke-thickness="0.75" data-tchmi-top="0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-visibility="%f%if( %pp%Shape%/pp% == &quot;Arrow_Left&quot;) {&quot;Visible&quot;} else {&quot;Collapsed&quot;};%/f%" data-tchmi-fill-color="%pp%ColorOff%/pp%">
<script data-tchmi-target-attribute="data-tchmi-stroke-color" type="application/json">
{
  "color": "Black"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "None"
}
</script>
</div>

<div id="TcHmiPolygon_Arrow_Right" data-tchmi-type="tchmi-polygon" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-points="0,0 100,50 0,100" data-tchmi-scale-mode="ScaleToFill" data-tchmi-stroke-thickness="0.75" data-tchmi-top="0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-visibility="%f%if( %pp%Shape%/pp% == &quot;Arrow_Right&quot;) {&quot;Visible&quot;} else {&quot;Collapsed&quot;};%/f%" data-tchmi-fill-color="%pp%ColorOff%/pp%">
<script data-tchmi-target-attribute="data-tchmi-stroke-color" type="application/json">
{
  "color": "Black"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "None"
}
</script>
</div>

<div id="TcHmiPolygon_Arrow_Top" data-tchmi-type="tchmi-polygon" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-points="50,0 100,100 0,100" data-tchmi-scale-mode="ScaleToFill" data-tchmi-stroke-thickness="0.75" data-tchmi-top="0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-visibility="%f%if( %pp%Shape%/pp% == &quot;Arrow_Top&quot;) {&quot;Visible&quot;} else {&quot;Collapsed&quot;};%/f%" data-tchmi-fill-color="%pp%ColorOff%/pp%">
<script data-tchmi-target-attribute="data-tchmi-stroke-color" type="application/json">
{
  "color": "Black"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "None"
}
</script>
</div>

<div id="TcHmiPolygon_Arrow_Bot" data-tchmi-type="tchmi-polygon" data-tchmi-height="100" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-points="0,0 100,0 50,100" data-tchmi-scale-mode="ScaleToFill" data-tchmi-stroke-thickness="0.75" data-tchmi-top="0" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-visibility="%f%if( %pp%Shape%/pp% == &quot;Arrow_Bot&quot;) {&quot;Visible&quot;} else {&quot;Collapsed&quot;};%/f%" data-tchmi-fill-color="%pp%ColorOff%/pp%">
<script data-tchmi-target-attribute="data-tchmi-stroke-color" type="application/json">
{
  "color": "Black"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "None"
}
</script>
</div>

</div>